{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About This PHP SDK produces the SARIF output, which is a JSON file formatted in accordance with the latest specification . This implementation follows the general format rules but also specifies several custom properties written in property bags .","title":"Home"},{"location":"#about","text":"This PHP SDK produces the SARIF output, which is a JSON file formatted in accordance with the latest specification . This implementation follows the general format rules but also specifies several custom properties written in property bags .","title":"About"},{"location":"getting-started/","text":"Getting started Requirements PHP 7.1 or greater ext-json ext-pcre ext-spl Generated with clue/graph-composer Installation With Composer Install the SARIF PHP SDK with Composer . composer require bartlett/sarif-php-sdk With Git The SARIF PHP SDK can be directly used from GitHub by cloning the repository into a directory of your choice. git clone https://github.com/llaville/sarif-php-sdk.git","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#requirements","text":"PHP 7.1 or greater ext-json ext-pcre ext-spl Generated with clue/graph-composer","title":"Requirements"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#with-composer","text":"Install the SARIF PHP SDK with Composer . composer require bartlett/sarif-php-sdk","title":"With Composer"},{"location":"getting-started/#with-git","text":"The SARIF PHP SDK can be directly used from GitHub by cloning the repository into a directory of your choice. git clone https://github.com/llaville/sarif-php-sdk.git","title":"With Git"},{"location":"reference/address/","text":"address object An address object describes a physical or virtual address, or a range of addresses, in an \u201caddressable region\u201d (memory or a binary file). See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"addresses\" : [ { \"absoluteAddress\" : 1024 , \"kind\" : \"module\" , \"name\" : \"Multitool.exe\" }, { \"absoluteAddress\" : 1400 , \"relativeAddress\" : 376 , \"kind\" : \"header\" , \"name\" : \"Sections\" , \"offsetFromParent\" : 376 , \"parentIndex\" : 0 }, { \"absoluteAddress\" : 1536 , \"relativeAddress\" : 512 , \"kind\" : \"section\" , \"name\" : \".text\" , \"offsetFromParent\" : 136 , \"parentIndex\" : 1 } ], \"results\" : [] } ] } How to generate See examples/address.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Address ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $address1 = new Address (); $address1 -> setName ( 'Multitool.exe' ); $address1 -> setKind ( 'module' ); $address1 -> setAbsoluteAddress ( 1024 ); $address2 = new Address (); $address2 -> setName ( 'Sections' ); $address2 -> setKind ( 'header' ); $address2 -> setParentIndex ( 0 ); $address2 -> setOffsetFromParent ( 376 ); $address2 -> setAbsoluteAddress ( 1400 ); $address2 -> setRelativeAddress ( 376 ); $address3 = new Address (); $address3 -> setName ( '.text' ); $address3 -> setKind ( 'section' ); $address3 -> setParentIndex ( 1 ); $address3 -> setOffsetFromParent ( 136 ); $address3 -> setAbsoluteAddress ( 1536 ); $address3 -> setRelativeAddress ( 512 ); $run = new Run ( $tool ); $run -> addAddresses ([ $address1 , $address2 , $address3 ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Address"},{"location":"reference/address/#address-object","text":"An address object describes a physical or virtual address, or a range of addresses, in an \u201caddressable region\u201d (memory or a binary file). See specification .","title":"address object"},{"location":"reference/address/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"addresses\" : [ { \"absoluteAddress\" : 1024 , \"kind\" : \"module\" , \"name\" : \"Multitool.exe\" }, { \"absoluteAddress\" : 1400 , \"relativeAddress\" : 376 , \"kind\" : \"header\" , \"name\" : \"Sections\" , \"offsetFromParent\" : 376 , \"parentIndex\" : 0 }, { \"absoluteAddress\" : 1536 , \"relativeAddress\" : 512 , \"kind\" : \"section\" , \"name\" : \".text\" , \"offsetFromParent\" : 136 , \"parentIndex\" : 1 } ], \"results\" : [] } ] }","title":"Example"},{"location":"reference/address/#how-to-generate","text":"See examples/address.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Address ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $address1 = new Address (); $address1 -> setName ( 'Multitool.exe' ); $address1 -> setKind ( 'module' ); $address1 -> setAbsoluteAddress ( 1024 ); $address2 = new Address (); $address2 -> setName ( 'Sections' ); $address2 -> setKind ( 'header' ); $address2 -> setParentIndex ( 0 ); $address2 -> setOffsetFromParent ( 376 ); $address2 -> setAbsoluteAddress ( 1400 ); $address2 -> setRelativeAddress ( 376 ); $address3 = new Address (); $address3 -> setName ( '.text' ); $address3 -> setKind ( 'section' ); $address3 -> setParentIndex ( 1 ); $address3 -> setOffsetFromParent ( 136 ); $address3 -> setAbsoluteAddress ( 1536 ); $address3 -> setRelativeAddress ( 512 ); $run = new Run ( $tool ); $run -> addAddresses ([ $address1 , $address2 , $address3 ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/artifact/","text":"artifact object An artifact object represents a single artifact. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"artifacts\" : [ { \"location\" : { \"uri\" : \"file:\\/\\/\\/C:\\/Code\\/app.zip\" }, \"mimeType\" : \"application\\/zip\" }, { \"location\" : { \"uri\" : \"docs\\/intro.docx\" }, \"mimeType\" : \"application\\/vnd.openxmlformats-officedocument.wordprocessingml.document\" }, { \"parentIndex\" : 1 , \"offset\" : 17522 , \"length\" : 4050 , \"mimeType\" : \"application\\/x-contoso-animation\" } ], \"results\" : [] } ] } How to generate See examples/artifact.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Artifact ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifact1 = new Artifact (); $artifactLocation1 = new ArtifactLocation (); $artifactLocation1 -> setUri ( 'file:///C:/Code/app.zip' ); $artifact1 -> setLocation ( $artifactLocation1 ); $artifact1 -> setMimeType ( 'application/zip' ); $artifact2 = new Artifact (); $artifactLocation2 = new ArtifactLocation (); $artifactLocation2 -> setUri ( 'docs/intro.docx' ); $artifact2 -> setLocation ( $artifactLocation2 ); $artifact2 -> setMimeType ( 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ); $artifact2 -> setParentIndex ( 0 ); $artifact3 = new Artifact (); $artifact3 -> setOffset ( 17522 ); $artifact3 -> setLength ( 4050 ); $artifact3 -> setMimeType ( 'application/x-contoso-animation' ); $artifact3 -> setParentIndex ( 1 ); $run = new Run ( $tool ); $run -> addArtifacts ([ $artifact1 , $artifact2 , $artifact3 ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Artifact"},{"location":"reference/artifact/#artifact-object","text":"An artifact object represents a single artifact. See specification .","title":"artifact object"},{"location":"reference/artifact/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"artifacts\" : [ { \"location\" : { \"uri\" : \"file:\\/\\/\\/C:\\/Code\\/app.zip\" }, \"mimeType\" : \"application\\/zip\" }, { \"location\" : { \"uri\" : \"docs\\/intro.docx\" }, \"mimeType\" : \"application\\/vnd.openxmlformats-officedocument.wordprocessingml.document\" }, { \"parentIndex\" : 1 , \"offset\" : 17522 , \"length\" : 4050 , \"mimeType\" : \"application\\/x-contoso-animation\" } ], \"results\" : [] } ] }","title":"Example"},{"location":"reference/artifact/#how-to-generate","text":"See examples/artifact.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Artifact ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifact1 = new Artifact (); $artifactLocation1 = new ArtifactLocation (); $artifactLocation1 -> setUri ( 'file:///C:/Code/app.zip' ); $artifact1 -> setLocation ( $artifactLocation1 ); $artifact1 -> setMimeType ( 'application/zip' ); $artifact2 = new Artifact (); $artifactLocation2 = new ArtifactLocation (); $artifactLocation2 -> setUri ( 'docs/intro.docx' ); $artifact2 -> setLocation ( $artifactLocation2 ); $artifact2 -> setMimeType ( 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ); $artifact2 -> setParentIndex ( 0 ); $artifact3 = new Artifact (); $artifact3 -> setOffset ( 17522 ); $artifact3 -> setLength ( 4050 ); $artifact3 -> setMimeType ( 'application/x-contoso-animation' ); $artifact3 -> setParentIndex ( 1 ); $run = new Run ( $tool ); $run -> addArtifacts ([ $artifact1 , $artifact2 , $artifact3 ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/artifactChange/","text":"artifactChange object An artifactChange object represents a change to a single artifact. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"fixes\" : [ { \"artifactChanges\" : [ { \"artifactLocation\" : { \"uri\" : \"src\\/a.c\" }, \"replacements\" : [ { \"deletedRegion\" : { \"startLine\" : 1 , \"startColumn\" : 1 , \"endLine\" : 1 }, \"insertedContent\" : { \"text\" : \"\\/\\/ \" } } ] } ] } ] } ] } ] } How to generate See examples/fix.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactChange ; use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Fix ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Replacement ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'src/a.c' ); $replacement = new Replacement ( new Region ( 1 , 1 , 1 )); $insertedContent = new ArtifactContent (); $insertedContent -> setText ( '// ' ); $replacement -> setInsertedContent ( $insertedContent ); $artifactChange = new ArtifactChange ( $artifactLocation , [ $replacement ]); $fix = new Fix ([ $artifactChange ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CA1001' ); $result -> addFixes ([ $fix ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"artifactChange"},{"location":"reference/artifactChange/#artifactchange-object","text":"An artifactChange object represents a change to a single artifact. See specification .","title":"artifactChange object"},{"location":"reference/artifactChange/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"fixes\" : [ { \"artifactChanges\" : [ { \"artifactLocation\" : { \"uri\" : \"src\\/a.c\" }, \"replacements\" : [ { \"deletedRegion\" : { \"startLine\" : 1 , \"startColumn\" : 1 , \"endLine\" : 1 }, \"insertedContent\" : { \"text\" : \"\\/\\/ \" } } ] } ] } ] } ] } ] }","title":"Example"},{"location":"reference/artifactChange/#how-to-generate","text":"See examples/fix.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactChange ; use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Fix ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Replacement ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'src/a.c' ); $replacement = new Replacement ( new Region ( 1 , 1 , 1 )); $insertedContent = new ArtifactContent (); $insertedContent -> setText ( '// ' ); $replacement -> setInsertedContent ( $insertedContent ); $artifactChange = new ArtifactChange ( $artifactLocation , [ $replacement ]); $fix = new Fix ([ $artifactChange ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CA1001' ); $result -> addFixes ([ $fix ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/artifactContent/","text":"artifactContent object Certain properties in this document represent the contents of portions of artifacts external to the log file, for example, artifacts that were scanned by an analysis tool. SARIF represents such content with an artifactContent object. Depending on the circumstances, the SARIF log file might need to represent this content as readable text, raw bytes, or both. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"fixes\" : [ { \"artifactChanges\" : [ { \"artifactLocation\" : { \"uri\" : \"src\\/a.c\" }, \"replacements\" : [ { \"deletedRegion\" : { \"startLine\" : 1 , \"startColumn\" : 1 , \"endLine\" : 1 }, \"insertedContent\" : { \"text\" : \"\\/\\/ \" } } ] } ] } ] } ] } ] } How to generate See examples/fix.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactChange ; use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Fix ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Replacement ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'src/a.c' ); $replacement = new Replacement ( new Region ( 1 , 1 , 1 )); $insertedContent = new ArtifactContent (); $insertedContent -> setText ( '// ' ); $replacement -> setInsertedContent ( $insertedContent ); $artifactChange = new ArtifactChange ( $artifactLocation , [ $replacement ]); $fix = new Fix ([ $artifactChange ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CA1001' ); $result -> addFixes ([ $fix ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"artifactContent"},{"location":"reference/artifactContent/#artifactcontent-object","text":"Certain properties in this document represent the contents of portions of artifacts external to the log file, for example, artifacts that were scanned by an analysis tool. SARIF represents such content with an artifactContent object. Depending on the circumstances, the SARIF log file might need to represent this content as readable text, raw bytes, or both. See specification .","title":"artifactContent object"},{"location":"reference/artifactContent/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"fixes\" : [ { \"artifactChanges\" : [ { \"artifactLocation\" : { \"uri\" : \"src\\/a.c\" }, \"replacements\" : [ { \"deletedRegion\" : { \"startLine\" : 1 , \"startColumn\" : 1 , \"endLine\" : 1 }, \"insertedContent\" : { \"text\" : \"\\/\\/ \" } } ] } ] } ] } ] } ] }","title":"Example"},{"location":"reference/artifactContent/#how-to-generate","text":"See examples/fix.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactChange ; use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Fix ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Replacement ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'src/a.c' ); $replacement = new Replacement ( new Region ( 1 , 1 , 1 )); $insertedContent = new ArtifactContent (); $insertedContent -> setText ( '// ' ); $replacement -> setInsertedContent ( $insertedContent ); $artifactChange = new ArtifactChange ( $artifactLocation , [ $replacement ]); $fix = new Fix ([ $artifactChange ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CA1001' ); $result -> addFixes ([ $fix ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/attachment/","text":"attachment object An attachment object describes an artifact relevant to the detection of a result. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on screen shot provided\" }, \"attachments\" : [ { \"artifactLocation\" : { \"uri\" : \"file:\\/\\/\\/C:\\/ScanOutput\\/image001.png\" }, \"description\" : { \"text\" : \"Screen shot\" } } ] } ] } ] } How to generate See examples/attachment.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $attachment = new Attachment (); $attachment -> setDescription ( new Message ( 'Screen shot' )); $attachment -> setArtifactLocation ( new ArtifactLocation ( 'file:///C:/ScanOutput/image001.png' )); $result = new Result ( new Message ( 'Have a look on screen shot provided' )); $result -> addAttachments ([ $attachment ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Attachment"},{"location":"reference/attachment/#attachment-object","text":"An attachment object describes an artifact relevant to the detection of a result. See specification .","title":"attachment object"},{"location":"reference/attachment/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on screen shot provided\" }, \"attachments\" : [ { \"artifactLocation\" : { \"uri\" : \"file:\\/\\/\\/C:\\/ScanOutput\\/image001.png\" }, \"description\" : { \"text\" : \"Screen shot\" } } ] } ] } ] }","title":"Example"},{"location":"reference/attachment/#how-to-generate","text":"See examples/attachment.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $attachment = new Attachment (); $attachment -> setDescription ( new Message ( 'Screen shot' )); $attachment -> setArtifactLocation ( new ArtifactLocation ( 'file:///C:/ScanOutput/image001.png' )); $result = new Result ( new Message ( 'Have a look on screen shot provided' )); $result -> addAttachments ([ $attachment ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/codeFlow/","text":"codeFlow object A codeFlow object describes the progress of one or more programs through one or more thread flows, which together lead to the detection of a problem in the system being analyzed. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A result object\" }, \"codeFlows\" : [ { \"threadFlows\" : [ { \"locations\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"ui\\/window.c\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 42 } } }, \"state\" : { \"x\" : { \"text\" : \"42\" }, \"y\" : { \"text\" : \"54\" }, \"x+y\" : { \"text\" : \"96\" } }, \"nestingLevel\" : 0 , \"executionOrder\" : 2 } ], \"id\" : \"thread-123\" , \"message\" : { \"text\" : \"A threadFlow object\" } } ], \"message\" : { \"text\" : \"A codeFlow object\" } } ] } ] } ] } How to generate See examples/codeFlow.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\CodeFlow ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\ThreadFlow ; use Bartlett\\Sarif\\Definition\\ThreadFlowLocation ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $threadFlowLocation = new ThreadFlowLocation (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'ui/window.c' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 42 )); $location -> setPhysicalLocation ( $physicalLocation ); $threadFlowLocation -> setLocation ( $location ); $threadFlowLocation -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '42' ), 'y' => new MultiformatMessageString ( '54' ), 'x+y' => new MultiformatMessageString ( '96' ), ]); $threadFlowLocation -> setNestingLevel ( 0 ); $threadFlowLocation -> setExecutionOrder ( 2 ); $threadFlow = new ThreadFlow ([ $threadFlowLocation ]); $threadFlow -> setId ( 'thread-123' ); $threadFlow -> setMessage ( new Message ( 'A threadFlow object' )); $codeFlow = new CodeFlow ([ $threadFlow ]); $codeFlow -> setMessage ( new Message ( 'A codeFlow object' )); $result = new Result ( new Message ( 'A result object' )); $result -> addCodeFlows ([ $codeFlow ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"codeFlow"},{"location":"reference/codeFlow/#codeflow-object","text":"A codeFlow object describes the progress of one or more programs through one or more thread flows, which together lead to the detection of a problem in the system being analyzed. See specification .","title":"codeFlow object"},{"location":"reference/codeFlow/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A result object\" }, \"codeFlows\" : [ { \"threadFlows\" : [ { \"locations\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"ui\\/window.c\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 42 } } }, \"state\" : { \"x\" : { \"text\" : \"42\" }, \"y\" : { \"text\" : \"54\" }, \"x+y\" : { \"text\" : \"96\" } }, \"nestingLevel\" : 0 , \"executionOrder\" : 2 } ], \"id\" : \"thread-123\" , \"message\" : { \"text\" : \"A threadFlow object\" } } ], \"message\" : { \"text\" : \"A codeFlow object\" } } ] } ] } ] }","title":"Example"},{"location":"reference/codeFlow/#how-to-generate","text":"See examples/codeFlow.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\CodeFlow ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\ThreadFlow ; use Bartlett\\Sarif\\Definition\\ThreadFlowLocation ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $threadFlowLocation = new ThreadFlowLocation (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'ui/window.c' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 42 )); $location -> setPhysicalLocation ( $physicalLocation ); $threadFlowLocation -> setLocation ( $location ); $threadFlowLocation -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '42' ), 'y' => new MultiformatMessageString ( '54' ), 'x+y' => new MultiformatMessageString ( '96' ), ]); $threadFlowLocation -> setNestingLevel ( 0 ); $threadFlowLocation -> setExecutionOrder ( 2 ); $threadFlow = new ThreadFlow ([ $threadFlowLocation ]); $threadFlow -> setId ( 'thread-123' ); $threadFlow -> setMessage ( new Message ( 'A threadFlow object' )); $codeFlow = new CodeFlow ([ $threadFlow ]); $codeFlow -> setMessage ( new Message ( 'A codeFlow object' )); $result = new Result ( new Message ( 'A result object' )); $result -> addCodeFlows ([ $codeFlow ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/configurationOverride/","text":"configurationOverride object A configurationOverride object modifies the effective runtime configuration of a specified reportingDescriptor object, which we refer to as theDescriptor. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA2101\" , \"defaultConfiguration\" : { \"enabled\" : true , \"level\" : \"error\" , \"rank\" : -1 } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"ruleConfigurationOverrides\" : [ { \"configuration\" : { \"enabled\" : true , \"level\" : \"warning\" , \"rank\" : -1 }, \"descriptor\" : { \"index\" : 0 } } ] } ], \"results\" : [] } ] } How to generate See examples/configurationOverride.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ConfigurationOverride ; use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\ReportingConfiguration ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'CA2101' ); $reportingConf = new ReportingConfiguration (); $reportingConf -> setLevel ( 'error' ); $rule -> setDefaultConfiguration ( $reportingConf ); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $ruleConf = new ReportingConfiguration (); $ruleConf -> setLevel ( 'warning' ); $confOverrides = new ConfigurationOverride (); $descriptor = new ReportingDescriptorReference ( 0 ); $confOverrides -> setDescriptor ( $descriptor ); $confOverrides -> setConfiguration ( $ruleConf ); $invocation = new Invocation ( true ); $invocation -> addRuleConfigurationOverrides ([ $confOverrides ]); $run = new Run ( $tool ); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"configurationOverride"},{"location":"reference/configurationOverride/#configurationoverride-object","text":"A configurationOverride object modifies the effective runtime configuration of a specified reportingDescriptor object, which we refer to as theDescriptor. See specification .","title":"configurationOverride object"},{"location":"reference/configurationOverride/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA2101\" , \"defaultConfiguration\" : { \"enabled\" : true , \"level\" : \"error\" , \"rank\" : -1 } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"ruleConfigurationOverrides\" : [ { \"configuration\" : { \"enabled\" : true , \"level\" : \"warning\" , \"rank\" : -1 }, \"descriptor\" : { \"index\" : 0 } } ] } ], \"results\" : [] } ] }","title":"Example"},{"location":"reference/configurationOverride/#how-to-generate","text":"See examples/configurationOverride.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ConfigurationOverride ; use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\ReportingConfiguration ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'CA2101' ); $reportingConf = new ReportingConfiguration (); $reportingConf -> setLevel ( 'error' ); $rule -> setDefaultConfiguration ( $reportingConf ); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $ruleConf = new ReportingConfiguration (); $ruleConf -> setLevel ( 'warning' ); $confOverrides = new ConfigurationOverride (); $descriptor = new ReportingDescriptorReference ( 0 ); $confOverrides -> setDescriptor ( $descriptor ); $confOverrides -> setConfiguration ( $ruleConf ); $invocation = new Invocation ( true ); $invocation -> addRuleConfigurationOverrides ([ $confOverrides ]); $run = new Run ( $tool ); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/conversion/","text":"conversion object A conversion object describes how a converter transformed the output of an analysis tool from the analysis tool\u2019s native output format into the SARIF format. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"AndroidStudio\" , \"semanticVersion\" : \"1.0.0-beta.1\" , \"informationUri\" : \"https:\\/\\/android-studion.dev\" } }, \"conversion\" : { \"tool\" : { \"driver\" : { \"name\" : \"SARIF SDK Multitool\" } }, \"invocation\" : { \"executionSuccessful\" : true , \"commandLine\" : \"Sarif.Multitool.exe convert -t AndroidStudio northwind.log\" }, \"analysisToolLogFiles\" : [ { \"uri\" : \"northwind.log\" , \"uriBaseId\" : \"$LOG_DIR$\" } ] }, \"results\" : [] } ] } How to generate See examples/conversion.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Conversion ; use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'AndroidStudio' ); $driver -> setInformationUri ( 'https://android-studion.dev' ); $driver -> setSemanticVersion ( '1.0.0-beta.1' ); $tool = new Tool ( $driver ); $converter = new Tool ( new ToolComponent ( 'SARIF SDK Multitool' )); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'northwind.log' ); $artifactLocation -> setUriBaseId ( '$LOG_DIR$' ); $invocation = new Invocation ( true ); $invocation -> setCommandLine ( 'Sarif.Multitool.exe convert -t AndroidStudio northwind.log' ); $conversion = new Conversion ( $converter ); $conversion -> addAnalysisToolLogFiles ([ $artifactLocation ]); $conversion -> setInvocation ( $invocation ); $run = new Run ( $tool ); $run -> setConversion ( $conversion ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Conversion"},{"location":"reference/conversion/#conversion-object","text":"A conversion object describes how a converter transformed the output of an analysis tool from the analysis tool\u2019s native output format into the SARIF format. See specification .","title":"conversion object"},{"location":"reference/conversion/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"AndroidStudio\" , \"semanticVersion\" : \"1.0.0-beta.1\" , \"informationUri\" : \"https:\\/\\/android-studion.dev\" } }, \"conversion\" : { \"tool\" : { \"driver\" : { \"name\" : \"SARIF SDK Multitool\" } }, \"invocation\" : { \"executionSuccessful\" : true , \"commandLine\" : \"Sarif.Multitool.exe convert -t AndroidStudio northwind.log\" }, \"analysisToolLogFiles\" : [ { \"uri\" : \"northwind.log\" , \"uriBaseId\" : \"$LOG_DIR$\" } ] }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/conversion/#how-to-generate","text":"See examples/conversion.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Conversion ; use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'AndroidStudio' ); $driver -> setInformationUri ( 'https://android-studion.dev' ); $driver -> setSemanticVersion ( '1.0.0-beta.1' ); $tool = new Tool ( $driver ); $converter = new Tool ( new ToolComponent ( 'SARIF SDK Multitool' )); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'northwind.log' ); $artifactLocation -> setUriBaseId ( '$LOG_DIR$' ); $invocation = new Invocation ( true ); $invocation -> setCommandLine ( 'Sarif.Multitool.exe convert -t AndroidStudio northwind.log' ); $conversion = new Conversion ( $converter ); $conversion -> addAnalysisToolLogFiles ([ $artifactLocation ]); $conversion -> setInvocation ( $invocation ); $run = new Run ( $tool ); $run -> setConversion ( $conversion ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/edge/","text":"edge object A edge object represents a directed edge in the graph represented by theGraph. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on this graph\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" }, { \"id\" : \"n1\" , \"children\" : [ { \"id\" : \"n3\" } ] } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n3\" , \"targetNodeId\" : \"n4\" } ] } ] } ] } ] } How to generate See examples/graph.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Rectangle ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 1 ] -> addChildren ([ $nodes [ 3 ]]); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n3' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $result = new Result ( new Message ( 'Have a look on this graph' )); $result -> addGraphs ([ $graph ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Edge"},{"location":"reference/edge/#edge-object","text":"A edge object represents a directed edge in the graph represented by theGraph. See specification .","title":"edge object"},{"location":"reference/edge/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on this graph\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" }, { \"id\" : \"n1\" , \"children\" : [ { \"id\" : \"n3\" } ] } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n3\" , \"targetNodeId\" : \"n4\" } ] } ] } ] } ] }","title":"Example"},{"location":"reference/edge/#how-to-generate","text":"See examples/graph.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Rectangle ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 1 ] -> addChildren ([ $nodes [ 3 ]]); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n3' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $result = new Result ( new Message ( 'Have a look on this graph' )); $result -> addGraphs ([ $graph ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/edgeTraversal/","text":"edgeTraversal object An edgeTraversal object represents the traversal of a single edge during a graph traversal. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A graph and edge traversal objects\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n1\" }, { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n1\" , \"targetNodeId\" : \"n2\" }, { \"id\" : \"e2\" , \"sourceNodeId\" : \"n2\" , \"targetNodeId\" : \"n3\" }, { \"id\" : \"e3\" , \"sourceNodeId\" : \"n2\" , \"targetNodeId\" : \"n4\" } ] } ], \"graphTraversals\" : [ { \"resultGraphIndex\" : 0 , \"initialState\" : { \"x\" : { \"text\" : \"1\" }, \"y\" : { \"text\" : \"2\" }, \"x+y\" : { \"text\" : \"3\" } }, \"edgeTraversals\" : [ { \"edgeId\" : \"e1\" , \"finalState\" : { \"x\" : { \"text\" : \"4\" }, \"y\" : { \"text\" : \"2\" }, \"x+y\" : { \"text\" : \"6\" } } }, { \"edgeId\" : \"e3\" , \"finalState\" : { \"x\" : { \"text\" : \"4\" }, \"y\" : { \"text\" : \"7\" }, \"x+y\" : { \"text\" : \"11\" } } } ] } ] } ] } ] } How to generate See examples/graphTraversal.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\EdgeTraversal ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\GraphTraversal ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n1' , 'n2' ); $edges [ 2 ] = new Edge ( 'e2' , 'n2' , 'n3' ); $edges [ 3 ] = new Edge ( 'e3' , 'n2' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $graphTraversal = new GraphTraversal ( null , 0 ); $graphTraversal -> addAdditionalPropertiesInitialState ([ 'x' => new MultiformatMessageString ( '1' ), 'y' => new MultiformatMessageString ( '2' ), 'x+y' => new MultiformatMessageString ( '3' ), ]); $edgeTraversal1 = new EdgeTraversal ( 'e1' ); $edgeTraversal1 -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '4' ), 'y' => new MultiformatMessageString ( '2' ), 'x+y' => new MultiformatMessageString ( '6' ), ]); $edgeTraversal3 = new EdgeTraversal ( 'e3' ); $edgeTraversal3 -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '4' ), 'y' => new MultiformatMessageString ( '7' ), 'x+y' => new MultiformatMessageString ( '11' ), ]); $graphTraversal -> addEdgeTraversals ([ $edgeTraversal1 , $edgeTraversal3 ]); $result = new Result ( new Message ( 'A graph and edge traversal objects' )); $result -> addGraphs ([ $graph ]); $result -> addGraphTraversals ([ $graphTraversal ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"edgeTraversal"},{"location":"reference/edgeTraversal/#edgetraversal-object","text":"An edgeTraversal object represents the traversal of a single edge during a graph traversal. See specification .","title":"edgeTraversal object"},{"location":"reference/edgeTraversal/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A graph and edge traversal objects\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n1\" }, { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n1\" , \"targetNodeId\" : \"n2\" }, { \"id\" : \"e2\" , \"sourceNodeId\" : \"n2\" , \"targetNodeId\" : \"n3\" }, { \"id\" : \"e3\" , \"sourceNodeId\" : \"n2\" , \"targetNodeId\" : \"n4\" } ] } ], \"graphTraversals\" : [ { \"resultGraphIndex\" : 0 , \"initialState\" : { \"x\" : { \"text\" : \"1\" }, \"y\" : { \"text\" : \"2\" }, \"x+y\" : { \"text\" : \"3\" } }, \"edgeTraversals\" : [ { \"edgeId\" : \"e1\" , \"finalState\" : { \"x\" : { \"text\" : \"4\" }, \"y\" : { \"text\" : \"2\" }, \"x+y\" : { \"text\" : \"6\" } } }, { \"edgeId\" : \"e3\" , \"finalState\" : { \"x\" : { \"text\" : \"4\" }, \"y\" : { \"text\" : \"7\" }, \"x+y\" : { \"text\" : \"11\" } } } ] } ] } ] } ] }","title":"Example"},{"location":"reference/edgeTraversal/#how-to-generate","text":"See examples/graphTraversal.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\EdgeTraversal ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\GraphTraversal ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n1' , 'n2' ); $edges [ 2 ] = new Edge ( 'e2' , 'n2' , 'n3' ); $edges [ 3 ] = new Edge ( 'e3' , 'n2' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $graphTraversal = new GraphTraversal ( null , 0 ); $graphTraversal -> addAdditionalPropertiesInitialState ([ 'x' => new MultiformatMessageString ( '1' ), 'y' => new MultiformatMessageString ( '2' ), 'x+y' => new MultiformatMessageString ( '3' ), ]); $edgeTraversal1 = new EdgeTraversal ( 'e1' ); $edgeTraversal1 -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '4' ), 'y' => new MultiformatMessageString ( '2' ), 'x+y' => new MultiformatMessageString ( '6' ), ]); $edgeTraversal3 = new EdgeTraversal ( 'e3' ); $edgeTraversal3 -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '4' ), 'y' => new MultiformatMessageString ( '7' ), 'x+y' => new MultiformatMessageString ( '11' ), ]); $graphTraversal -> addEdgeTraversals ([ $edgeTraversal1 , $edgeTraversal3 ]); $result = new Result ( new Message ( 'A graph and edge traversal objects' )); $result -> addGraphs ([ $graph ]); $result -> addGraphTraversals ([ $graphTraversal ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/exception/","text":"exception object An exception object describes a runtime exception encountered during the execution of an analysis tool. This includes signals in POSIX-conforming operating systems. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"First version of rule.\" } }, { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"Second version of rule.\" } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"toolExecutionNotifications\" : [ { \"message\" : { \"text\" : \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" }, \"level\" : \"error\" , \"exception\" : { \"message\" : \"Exception evaluating rule 'C2001'\" }, \"descriptor\" : { \"index\" : 1 , \"id\" : \"CTN9999\" } } ] } ], \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CTN9999\" } ] } ] } How to generate See examples/exception.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Exception ; use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Notification ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $ruleV1 = new ReportingDescriptor ( 'CTN9999' ); $ruleV1 -> setShortDescription ( new MultiformatMessageString ( 'First version of rule.' )); $ruleV2 = new ReportingDescriptor ( 'CTN9999' ); $ruleV2 -> setShortDescription ( new MultiformatMessageString ( 'Second version of rule.' )); $driver -> addRules ([ $ruleV1 , $ruleV2 ]); $tool = new Tool ( $driver ); $notification = new Notification ( new Message ( \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" )); $notification -> setAssociatedRule ( new ReportingDescriptorReference ( 0 , 'C2001' )); $notification -> setDescriptor ( new ReportingDescriptorReference ( 1 , 'CTN9999' )); $notification -> setLevel ( 'error' ); $exception = new Exception (); $exception -> setMessage ( \"Exception evaluating rule 'C2001'\" ); $notification -> setRuntimeException ( $exception ); $invocation = new Invocation ( true ); $invocation -> addToolExecutionNotifications ([ $notification ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CTN9999' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( \\Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Exception"},{"location":"reference/exception/#exception-object","text":"An exception object describes a runtime exception encountered during the execution of an analysis tool. This includes signals in POSIX-conforming operating systems. See specification .","title":"exception object"},{"location":"reference/exception/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"First version of rule.\" } }, { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"Second version of rule.\" } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"toolExecutionNotifications\" : [ { \"message\" : { \"text\" : \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" }, \"level\" : \"error\" , \"exception\" : { \"message\" : \"Exception evaluating rule 'C2001'\" }, \"descriptor\" : { \"index\" : 1 , \"id\" : \"CTN9999\" } } ] } ], \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CTN9999\" } ] } ] }","title":"Example"},{"location":"reference/exception/#how-to-generate","text":"See examples/exception.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Exception ; use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Notification ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $ruleV1 = new ReportingDescriptor ( 'CTN9999' ); $ruleV1 -> setShortDescription ( new MultiformatMessageString ( 'First version of rule.' )); $ruleV2 = new ReportingDescriptor ( 'CTN9999' ); $ruleV2 -> setShortDescription ( new MultiformatMessageString ( 'Second version of rule.' )); $driver -> addRules ([ $ruleV1 , $ruleV2 ]); $tool = new Tool ( $driver ); $notification = new Notification ( new Message ( \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" )); $notification -> setAssociatedRule ( new ReportingDescriptorReference ( 0 , 'C2001' )); $notification -> setDescriptor ( new ReportingDescriptorReference ( 1 , 'CTN9999' )); $notification -> setLevel ( 'error' ); $exception = new Exception (); $exception -> setMessage ( \"Exception evaluating rule 'C2001'\" ); $notification -> setRuntimeException ( $exception ); $invocation = new Invocation ( true ); $invocation -> addToolExecutionNotifications ([ $notification ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CTN9999' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( \\Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/externalProperties/","text":"externalProperties object The top-level element of an external property file SHALL be an object which we refer to as an externalProperties object. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [] } ], \"inlineExternalProperties\" : [ { \"schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"guid\" : \"00001111-2222-1111-8888-555566667777\" , \"runGuid\" : \"88889999-AAAA-1111-8888-DDDDEEEEFFFF\" , \"externalizedProperties\" : { \"team\" : \"Security Assurance Team\" }, \"artifacts\" : [ { \"location\" : { \"uri\" : \"apple.png\" }, \"mimeType\" : \"image\\/png\" }, { \"location\" : { \"uri\" : \"banana.png\" }, \"mimeType\" : \"image\\/png\" } ] } ] } How to generate See examples/externalProperties.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Artifact ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\ExternalProperties ; use Bartlett\\Sarif\\Definition\\PropertyBag ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $apple = new Artifact (); $location = new ArtifactLocation (); $location -> setUri ( 'apple.png' ); $apple -> setLocation ( $location ); $apple -> setMimeType ( 'image/png' ); $banana = new Artifact (); $location = new ArtifactLocation (); $location -> setUri ( 'banana.png' ); $banana -> setLocation ( $location ); $banana -> setMimeType ( 'image/png' ); $propertyBag = new PropertyBag (); $propertyBag -> addProperty ( 'team' , 'Security Assurance Team' ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); $externalProperties = new ExternalProperties (); $externalProperties -> setGuid ( '00001111-2222-1111-8888-555566667777' ); $externalProperties -> setRunGuid ( '88889999-AAAA-1111-8888-DDDDEEEEFFFF' ); $externalProperties -> addArtifacts ([ $apple , $banana ]); $externalProperties -> setExternalizedProperties ( $propertyBag ); $log -> addInlineExternalProperties ([ $externalProperties ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"externalProperties"},{"location":"reference/externalProperties/#externalproperties-object","text":"The top-level element of an external property file SHALL be an object which we refer to as an externalProperties object. See specification .","title":"externalProperties object"},{"location":"reference/externalProperties/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [] } ], \"inlineExternalProperties\" : [ { \"schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"guid\" : \"00001111-2222-1111-8888-555566667777\" , \"runGuid\" : \"88889999-AAAA-1111-8888-DDDDEEEEFFFF\" , \"externalizedProperties\" : { \"team\" : \"Security Assurance Team\" }, \"artifacts\" : [ { \"location\" : { \"uri\" : \"apple.png\" }, \"mimeType\" : \"image\\/png\" }, { \"location\" : { \"uri\" : \"banana.png\" }, \"mimeType\" : \"image\\/png\" } ] } ] }","title":"Example"},{"location":"reference/externalProperties/#how-to-generate","text":"See examples/externalProperties.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Artifact ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\ExternalProperties ; use Bartlett\\Sarif\\Definition\\PropertyBag ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $apple = new Artifact (); $location = new ArtifactLocation (); $location -> setUri ( 'apple.png' ); $apple -> setLocation ( $location ); $apple -> setMimeType ( 'image/png' ); $banana = new Artifact (); $location = new ArtifactLocation (); $location -> setUri ( 'banana.png' ); $banana -> setLocation ( $location ); $banana -> setMimeType ( 'image/png' ); $propertyBag = new PropertyBag (); $propertyBag -> addProperty ( 'team' , 'Security Assurance Team' ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); $externalProperties = new ExternalProperties (); $externalProperties -> setGuid ( '00001111-2222-1111-8888-555566667777' ); $externalProperties -> setRunGuid ( '88889999-AAAA-1111-8888-DDDDEEEEFFFF' ); $externalProperties -> addArtifacts ([ $apple , $banana ]); $externalProperties -> setExternalizedProperties ( $propertyBag ); $log -> addInlineExternalProperties ([ $externalProperties ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/externalPropertyFileReference/","text":"externalPropertyFileReference object An externalPropertyFileReference object contains information that enables a SARIF consumer to locate the external property files that contain the values of all externalized properties associated with theRun. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"originalUriBaseIds\" : { \"LOGSDIR\" : { \"uri\" : \"file:\\/\\/\\/C:\\/logs\\/\" } }, \"externalPropertyFileReferences\" : { \"conversion\" : { \"location\" : { \"uri\" : \"scantool.conversion.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"11111111-1111-1111-8888-111111111111\" }, \"results\" : [ { \"location\" : { \"uri\" : \"scantool.results-1.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"22222222-2222-1111-8888-222222222222\" , \"itemCount\" : 1000 }, { \"location\" : { \"uri\" : \"scantool.results-2.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"33333333-3333-1111-8888-333333333333\" , \"itemCount\" : 4277 } ] }, \"results\" : [] } ] } How to generate See examples/externalPropertyFileReferences.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\ExternalPropertyFileReference ; use Bartlett\\Sarif\\Definition\\ExternalPropertyFileReferences ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $logsDir = new ArtifactLocation (); $logsDir -> setUri ( 'file:///C:/logs/' ); $run -> addAdditionalProperties ([ 'LOGSDIR' => $logsDir , ]); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.conversion.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $conversion = new ExternalPropertyFileReference ( $location , '11111111-1111-1111-8888-111111111111' ); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.results-1.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $resultRef1 = new ExternalPropertyFileReference ( $location , '22222222-2222-1111-8888-222222222222' ); $resultRef1 -> setItemCount ( 1000 ); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.results-2.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $resultRef2 = new ExternalPropertyFileReference ( $location , '33333333-3333-1111-8888-333333333333' ); $resultRef2 -> setItemCount ( 4277 ); $externalPropertyFileReferences = new ExternalPropertyFileReferences (); $externalPropertyFileReferences -> setConversion ( $conversion ); $externalPropertyFileReferences -> addResults ([ $resultRef1 , $resultRef2 ]); $run -> setExternalPropertyFileReferences ( $externalPropertyFileReferences ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"externalPropertyFileReference"},{"location":"reference/externalPropertyFileReference/#externalpropertyfilereference-object","text":"An externalPropertyFileReference object contains information that enables a SARIF consumer to locate the external property files that contain the values of all externalized properties associated with theRun. See specification .","title":"externalPropertyFileReference object"},{"location":"reference/externalPropertyFileReference/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"originalUriBaseIds\" : { \"LOGSDIR\" : { \"uri\" : \"file:\\/\\/\\/C:\\/logs\\/\" } }, \"externalPropertyFileReferences\" : { \"conversion\" : { \"location\" : { \"uri\" : \"scantool.conversion.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"11111111-1111-1111-8888-111111111111\" }, \"results\" : [ { \"location\" : { \"uri\" : \"scantool.results-1.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"22222222-2222-1111-8888-222222222222\" , \"itemCount\" : 1000 }, { \"location\" : { \"uri\" : \"scantool.results-2.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"33333333-3333-1111-8888-333333333333\" , \"itemCount\" : 4277 } ] }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/externalPropertyFileReference/#how-to-generate","text":"See examples/externalPropertyFileReferences.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\ExternalPropertyFileReference ; use Bartlett\\Sarif\\Definition\\ExternalPropertyFileReferences ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $logsDir = new ArtifactLocation (); $logsDir -> setUri ( 'file:///C:/logs/' ); $run -> addAdditionalProperties ([ 'LOGSDIR' => $logsDir , ]); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.conversion.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $conversion = new ExternalPropertyFileReference ( $location , '11111111-1111-1111-8888-111111111111' ); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.results-1.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $resultRef1 = new ExternalPropertyFileReference ( $location , '22222222-2222-1111-8888-222222222222' ); $resultRef1 -> setItemCount ( 1000 ); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.results-2.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $resultRef2 = new ExternalPropertyFileReference ( $location , '33333333-3333-1111-8888-333333333333' ); $resultRef2 -> setItemCount ( 4277 ); $externalPropertyFileReferences = new ExternalPropertyFileReferences (); $externalPropertyFileReferences -> setConversion ( $conversion ); $externalPropertyFileReferences -> addResults ([ $resultRef1 , $resultRef2 ]); $run -> setExternalPropertyFileReferences ( $externalPropertyFileReferences ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/externalPropertyFileReferences/","text":"externalPropertyFileReferences object An externalPropertyFileReferences object contains information that enables a SARIF consumer to locate the external property files that contain the values of all externalized properties associated with theRun. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"originalUriBaseIds\" : { \"LOGSDIR\" : { \"uri\" : \"file:\\/\\/\\/C:\\/logs\\/\" } }, \"externalPropertyFileReferences\" : { \"conversion\" : { \"location\" : { \"uri\" : \"scantool.conversion.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"11111111-1111-1111-8888-111111111111\" }, \"results\" : [ { \"location\" : { \"uri\" : \"scantool.results-1.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"22222222-2222-1111-8888-222222222222\" , \"itemCount\" : 1000 }, { \"location\" : { \"uri\" : \"scantool.results-2.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"33333333-3333-1111-8888-333333333333\" , \"itemCount\" : 4277 } ] }, \"results\" : [] } ] } How to generate See examples/externalPropertyFileReferences.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\ExternalPropertyFileReference ; use Bartlett\\Sarif\\Definition\\ExternalPropertyFileReferences ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $logsDir = new ArtifactLocation (); $logsDir -> setUri ( 'file:///C:/logs/' ); $run -> addAdditionalProperties ([ 'LOGSDIR' => $logsDir , ]); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.conversion.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $conversion = new ExternalPropertyFileReference ( $location , '11111111-1111-1111-8888-111111111111' ); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.results-1.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $resultRef1 = new ExternalPropertyFileReference ( $location , '22222222-2222-1111-8888-222222222222' ); $resultRef1 -> setItemCount ( 1000 ); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.results-2.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $resultRef2 = new ExternalPropertyFileReference ( $location , '33333333-3333-1111-8888-333333333333' ); $resultRef2 -> setItemCount ( 4277 ); $externalPropertyFileReferences = new ExternalPropertyFileReferences (); $externalPropertyFileReferences -> setConversion ( $conversion ); $externalPropertyFileReferences -> addResults ([ $resultRef1 , $resultRef2 ]); $run -> setExternalPropertyFileReferences ( $externalPropertyFileReferences ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"externalPropertyFileReferences"},{"location":"reference/externalPropertyFileReferences/#externalpropertyfilereferences-object","text":"An externalPropertyFileReferences object contains information that enables a SARIF consumer to locate the external property files that contain the values of all externalized properties associated with theRun. See specification .","title":"externalPropertyFileReferences object"},{"location":"reference/externalPropertyFileReferences/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"originalUriBaseIds\" : { \"LOGSDIR\" : { \"uri\" : \"file:\\/\\/\\/C:\\/logs\\/\" } }, \"externalPropertyFileReferences\" : { \"conversion\" : { \"location\" : { \"uri\" : \"scantool.conversion.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"11111111-1111-1111-8888-111111111111\" }, \"results\" : [ { \"location\" : { \"uri\" : \"scantool.results-1.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"22222222-2222-1111-8888-222222222222\" , \"itemCount\" : 1000 }, { \"location\" : { \"uri\" : \"scantool.results-2.sarif-external-properties\" , \"uriBaseId\" : \"LOGSDIR\" }, \"guid\" : \"33333333-3333-1111-8888-333333333333\" , \"itemCount\" : 4277 } ] }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/externalPropertyFileReferences/#how-to-generate","text":"See examples/externalPropertyFileReferences.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\ExternalPropertyFileReference ; use Bartlett\\Sarif\\Definition\\ExternalPropertyFileReferences ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $logsDir = new ArtifactLocation (); $logsDir -> setUri ( 'file:///C:/logs/' ); $run -> addAdditionalProperties ([ 'LOGSDIR' => $logsDir , ]); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.conversion.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $conversion = new ExternalPropertyFileReference ( $location , '11111111-1111-1111-8888-111111111111' ); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.results-1.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $resultRef1 = new ExternalPropertyFileReference ( $location , '22222222-2222-1111-8888-222222222222' ); $resultRef1 -> setItemCount ( 1000 ); $location = new ArtifactLocation (); $location -> setUri ( 'scantool.results-2.sarif-external-properties' ); $location -> setUriBaseId ( 'LOGSDIR' ); $resultRef2 = new ExternalPropertyFileReference ( $location , '33333333-3333-1111-8888-333333333333' ); $resultRef2 -> setItemCount ( 4277 ); $externalPropertyFileReferences = new ExternalPropertyFileReferences (); $externalPropertyFileReferences -> setConversion ( $conversion ); $externalPropertyFileReferences -> addResults ([ $resultRef1 , $resultRef2 ]); $run -> setExternalPropertyFileReferences ( $externalPropertyFileReferences ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/fix/","text":"fix object A fix object represents a proposed fix for the problem indicated by theResult. It specifies a set of artifacts to modify. For each artifact, it specifies regions to remove, and provides new content to insert. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"fixes\" : [ { \"artifactChanges\" : [ { \"artifactLocation\" : { \"uri\" : \"src\\/a.c\" }, \"replacements\" : [ { \"deletedRegion\" : { \"startLine\" : 1 , \"startColumn\" : 1 , \"endLine\" : 1 }, \"insertedContent\" : { \"text\" : \"\\/\\/ \" } } ] } ] } ] } ] } ] } How to generate See examples/fix.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactChange ; use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Fix ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Replacement ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'src/a.c' ); $replacement = new Replacement ( new Region ( 1 , 1 , 1 )); $insertedContent = new ArtifactContent (); $insertedContent -> setText ( '// ' ); $replacement -> setInsertedContent ( $insertedContent ); $artifactChange = new ArtifactChange ( $artifactLocation , [ $replacement ]); $fix = new Fix ([ $artifactChange ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CA1001' ); $result -> addFixes ([ $fix ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Fix"},{"location":"reference/fix/#fix-object","text":"A fix object represents a proposed fix for the problem indicated by theResult. It specifies a set of artifacts to modify. For each artifact, it specifies regions to remove, and provides new content to insert. See specification .","title":"fix object"},{"location":"reference/fix/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"fixes\" : [ { \"artifactChanges\" : [ { \"artifactLocation\" : { \"uri\" : \"src\\/a.c\" }, \"replacements\" : [ { \"deletedRegion\" : { \"startLine\" : 1 , \"startColumn\" : 1 , \"endLine\" : 1 }, \"insertedContent\" : { \"text\" : \"\\/\\/ \" } } ] } ] } ] } ] } ] }","title":"Example"},{"location":"reference/fix/#how-to-generate","text":"See examples/fix.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactChange ; use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Fix ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Replacement ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'src/a.c' ); $replacement = new Replacement ( new Region ( 1 , 1 , 1 )); $insertedContent = new ArtifactContent (); $insertedContent -> setText ( '// ' ); $replacement -> setInsertedContent ( $insertedContent ); $artifactChange = new ArtifactChange ( $artifactLocation , [ $replacement ]); $fix = new Fix ([ $artifactChange ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CA1001' ); $result -> addFixes ([ $fix ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/graph/","text":"graph object A graph object represents a directed graph, a network of nodes and directed edges that describes some aspect of the structure of the code (for example, a call graph). See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on this graph\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" }, { \"id\" : \"n1\" , \"children\" : [ { \"id\" : \"n3\" } ] } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n3\" , \"targetNodeId\" : \"n4\" } ] } ] } ] } ] } How to generate See examples/graph.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Rectangle ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 1 ] -> addChildren ([ $nodes [ 3 ]]); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n3' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $result = new Result ( new Message ( 'Have a look on this graph' )); $result -> addGraphs ([ $graph ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Graph"},{"location":"reference/graph/#graph-object","text":"A graph object represents a directed graph, a network of nodes and directed edges that describes some aspect of the structure of the code (for example, a call graph). See specification .","title":"graph object"},{"location":"reference/graph/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on this graph\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" }, { \"id\" : \"n1\" , \"children\" : [ { \"id\" : \"n3\" } ] } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n3\" , \"targetNodeId\" : \"n4\" } ] } ] } ] } ] }","title":"Example"},{"location":"reference/graph/#how-to-generate","text":"See examples/graph.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Rectangle ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 1 ] -> addChildren ([ $nodes [ 3 ]]); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n3' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $result = new Result ( new Message ( 'Have a look on this graph' )); $result -> addGraphs ([ $graph ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/graphTraversal/","text":"graphTraversal object A graphTraversal object represents a \"graph traversal\", that is, a path through a graph specified by a sequence of connected \"edge traversals\", each of which is represented by an edgeTraversal object. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A graph and edge traversal objects\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n1\" }, { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n1\" , \"targetNodeId\" : \"n2\" }, { \"id\" : \"e2\" , \"sourceNodeId\" : \"n2\" , \"targetNodeId\" : \"n3\" }, { \"id\" : \"e3\" , \"sourceNodeId\" : \"n2\" , \"targetNodeId\" : \"n4\" } ] } ], \"graphTraversals\" : [ { \"resultGraphIndex\" : 0 , \"initialState\" : { \"x\" : { \"text\" : \"1\" }, \"y\" : { \"text\" : \"2\" }, \"x+y\" : { \"text\" : \"3\" } }, \"edgeTraversals\" : [ { \"edgeId\" : \"e1\" , \"finalState\" : { \"x\" : { \"text\" : \"4\" }, \"y\" : { \"text\" : \"2\" }, \"x+y\" : { \"text\" : \"6\" } } }, { \"edgeId\" : \"e3\" , \"finalState\" : { \"x\" : { \"text\" : \"4\" }, \"y\" : { \"text\" : \"7\" }, \"x+y\" : { \"text\" : \"11\" } } } ] } ] } ] } ] } How to generate See examples/graphTraversal.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\EdgeTraversal ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\GraphTraversal ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n1' , 'n2' ); $edges [ 2 ] = new Edge ( 'e2' , 'n2' , 'n3' ); $edges [ 3 ] = new Edge ( 'e3' , 'n2' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $graphTraversal = new GraphTraversal ( null , 0 ); $graphTraversal -> addAdditionalPropertiesInitialState ([ 'x' => new MultiformatMessageString ( '1' ), 'y' => new MultiformatMessageString ( '2' ), 'x+y' => new MultiformatMessageString ( '3' ), ]); $edgeTraversal1 = new EdgeTraversal ( 'e1' ); $edgeTraversal1 -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '4' ), 'y' => new MultiformatMessageString ( '2' ), 'x+y' => new MultiformatMessageString ( '6' ), ]); $edgeTraversal3 = new EdgeTraversal ( 'e3' ); $edgeTraversal3 -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '4' ), 'y' => new MultiformatMessageString ( '7' ), 'x+y' => new MultiformatMessageString ( '11' ), ]); $graphTraversal -> addEdgeTraversals ([ $edgeTraversal1 , $edgeTraversal3 ]); $result = new Result ( new Message ( 'A graph and edge traversal objects' )); $result -> addGraphs ([ $graph ]); $result -> addGraphTraversals ([ $graphTraversal ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"graphTraversal"},{"location":"reference/graphTraversal/#graphtraversal-object","text":"A graphTraversal object represents a \"graph traversal\", that is, a path through a graph specified by a sequence of connected \"edge traversals\", each of which is represented by an edgeTraversal object. See specification .","title":"graphTraversal object"},{"location":"reference/graphTraversal/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A graph and edge traversal objects\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n1\" }, { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n1\" , \"targetNodeId\" : \"n2\" }, { \"id\" : \"e2\" , \"sourceNodeId\" : \"n2\" , \"targetNodeId\" : \"n3\" }, { \"id\" : \"e3\" , \"sourceNodeId\" : \"n2\" , \"targetNodeId\" : \"n4\" } ] } ], \"graphTraversals\" : [ { \"resultGraphIndex\" : 0 , \"initialState\" : { \"x\" : { \"text\" : \"1\" }, \"y\" : { \"text\" : \"2\" }, \"x+y\" : { \"text\" : \"3\" } }, \"edgeTraversals\" : [ { \"edgeId\" : \"e1\" , \"finalState\" : { \"x\" : { \"text\" : \"4\" }, \"y\" : { \"text\" : \"2\" }, \"x+y\" : { \"text\" : \"6\" } } }, { \"edgeId\" : \"e3\" , \"finalState\" : { \"x\" : { \"text\" : \"4\" }, \"y\" : { \"text\" : \"7\" }, \"x+y\" : { \"text\" : \"11\" } } } ] } ] } ] } ] }","title":"Example"},{"location":"reference/graphTraversal/#how-to-generate","text":"See examples/graphTraversal.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\EdgeTraversal ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\GraphTraversal ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n1' , 'n2' ); $edges [ 2 ] = new Edge ( 'e2' , 'n2' , 'n3' ); $edges [ 3 ] = new Edge ( 'e3' , 'n2' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $graphTraversal = new GraphTraversal ( null , 0 ); $graphTraversal -> addAdditionalPropertiesInitialState ([ 'x' => new MultiformatMessageString ( '1' ), 'y' => new MultiformatMessageString ( '2' ), 'x+y' => new MultiformatMessageString ( '3' ), ]); $edgeTraversal1 = new EdgeTraversal ( 'e1' ); $edgeTraversal1 -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '4' ), 'y' => new MultiformatMessageString ( '2' ), 'x+y' => new MultiformatMessageString ( '6' ), ]); $edgeTraversal3 = new EdgeTraversal ( 'e3' ); $edgeTraversal3 -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '4' ), 'y' => new MultiformatMessageString ( '7' ), 'x+y' => new MultiformatMessageString ( '11' ), ]); $graphTraversal -> addEdgeTraversals ([ $edgeTraversal1 , $edgeTraversal3 ]); $result = new Result ( new Message ( 'A graph and edge traversal objects' )); $result -> addGraphs ([ $graph ]); $result -> addGraphTraversals ([ $graphTraversal ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/invocation/","text":"invocation object An invocation object describes the invocation of the analysis tool that was run. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"First version of rule.\" } }, { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"Second version of rule.\" } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"toolExecutionNotifications\" : [ { \"message\" : { \"text\" : \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" }, \"level\" : \"error\" , \"descriptor\" : { \"index\" : 1 , \"id\" : \"CTN9999\" } } ] } ], \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CTN9999\" } ] } ] } How to generate See examples/reportingDescriptorReference.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Notification ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $ruleV1 = new ReportingDescriptor ( 'CTN9999' ); $ruleV1 -> setShortDescription ( new MultiformatMessageString ( 'First version of rule.' )); $ruleV2 = new ReportingDescriptor ( 'CTN9999' ); $ruleV2 -> setShortDescription ( new MultiformatMessageString ( 'Second version of rule.' )); $driver -> addRules ([ $ruleV1 , $ruleV2 ]); $tool = new Tool ( $driver ); $notification = new Notification ( new Message ( \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" )); $notification -> setAssociatedRule ( new ReportingDescriptorReference ( 0 , 'C2001' )); $notification -> setDescriptor ( new ReportingDescriptorReference ( 1 , 'CTN9999' )); $notification -> setLevel ( 'error' ); $invocation = new Invocation ( true ); $invocation -> addToolExecutionNotifications ([ $notification ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CTN9999' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Invocation"},{"location":"reference/invocation/#invocation-object","text":"An invocation object describes the invocation of the analysis tool that was run. See specification .","title":"invocation object"},{"location":"reference/invocation/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"First version of rule.\" } }, { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"Second version of rule.\" } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"toolExecutionNotifications\" : [ { \"message\" : { \"text\" : \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" }, \"level\" : \"error\" , \"descriptor\" : { \"index\" : 1 , \"id\" : \"CTN9999\" } } ] } ], \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CTN9999\" } ] } ] }","title":"Example"},{"location":"reference/invocation/#how-to-generate","text":"See examples/reportingDescriptorReference.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Notification ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $ruleV1 = new ReportingDescriptor ( 'CTN9999' ); $ruleV1 -> setShortDescription ( new MultiformatMessageString ( 'First version of rule.' )); $ruleV2 = new ReportingDescriptor ( 'CTN9999' ); $ruleV2 -> setShortDescription ( new MultiformatMessageString ( 'Second version of rule.' )); $driver -> addRules ([ $ruleV1 , $ruleV2 ]); $tool = new Tool ( $driver ); $notification = new Notification ( new Message ( \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" )); $notification -> setAssociatedRule ( new ReportingDescriptorReference ( 0 , 'C2001' )); $notification -> setDescriptor ( new ReportingDescriptorReference ( 1 , 'CTN9999' )); $notification -> setLevel ( 'error' ); $invocation = new Invocation ( true ); $invocation -> addToolExecutionNotifications ([ $notification ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CTN9999' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/locationRelationship/","text":"locationRelationship object A locationRelationship object specifies one or more directed relationships from one location object, which we refer to as theSource, to another one, which we refer to as theTarget. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A result object with locationRelationship object\" }, \"locations\" : [ { \"id\" : 0 , \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"f.h\" }, \"region\" : { \"startLine\" : 42 } }, \"relationships\" : [ { \"target\" : 1 , \"kinds\" : [ \"isIncludedBy\" ] } ] } ], \"relatedLocations\" : [ { \"id\" : 1 , \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"g.h\" }, \"region\" : { \"startLine\" : 17 } }, \"relationships\" : [ { \"target\" : 0 , \"kinds\" : [ \"includes\" ] }, { \"target\" : 2 , \"kinds\" : [ \"isIncludedBy\" ] } ] }, { \"id\" : 2 , \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"g.c\" }, \"region\" : { \"startLine\" : 8 } }, \"relationships\" : [ { \"target\" : 1 , \"kinds\" : [ \"includes\" ] } ] } ] } ] } ] } How to generate See examples/locationRelationship.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\LocationRelationship ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $location = []; $physicalLocation = []; $artifactLocation = []; $region = []; $relationships = []; $location [ 0 ] = new Location (); $location [ 0 ] -> setId ( 0 ); $artifactLocation [ 0 ] = new ArtifactLocation (); $artifactLocation [ 0 ] -> setUri ( 'f.h' ); $physicalLocation [ 0 ] = new PhysicalLocation ( $artifactLocation [ 0 ]); $region [ 0 ] = new Region ( 42 ); $physicalLocation [ 0 ] -> setRegion ( $region [ 0 ]); $location [ 0 ] -> setPhysicalLocation ( $physicalLocation [ 0 ]); $relationships [ 0 ] = new LocationRelationship ( 1 ); $relationships [ 0 ] -> addKinds ([ 'isIncludedBy' ]); $location [ 0 ] -> addRelationships ([ $relationships [ 0 ]]); $location [ 1 ] = new Location (); $location [ 1 ] -> setId ( 1 ); $artifactLocation [ 1 ] = new ArtifactLocation (); $artifactLocation [ 1 ] -> setUri ( 'g.h' ); $physicalLocation [ 1 ] = new PhysicalLocation ( $artifactLocation [ 1 ]); $region [ 1 ] = new Region ( 17 ); $physicalLocation [ 1 ] -> setRegion ( $region [ 1 ]); $location [ 1 ] -> setPhysicalLocation ( $physicalLocation [ 1 ]); $relationships [ 1 ] = new LocationRelationship ( 0 ); $relationships [ 1 ] -> addKinds ([ 'includes' ]); $relationships [ 2 ] = new LocationRelationship ( 2 ); $relationships [ 2 ] -> addKinds ([ 'isIncludedBy' ]); $location [ 1 ] -> addRelationships ([ $relationships [ 1 ], $relationships [ 2 ]]); $location [ 2 ] = new Location (); $location [ 2 ] -> setId ( 2 ); $artifactLocation [ 2 ] = new ArtifactLocation (); $artifactLocation [ 2 ] -> setUri ( 'g.c' ); $physicalLocation [ 2 ] = new PhysicalLocation ( $artifactLocation [ 2 ]); $region [ 2 ] = new Region ( 8 ); $physicalLocation [ 2 ] -> setRegion ( $region [ 2 ]); $location [ 2 ] -> setPhysicalLocation ( $physicalLocation [ 2 ]); $relationships [ 2 ] = new LocationRelationship ( 1 ); $relationships [ 2 ] -> addKinds ([ 'includes' ]); $location [ 2 ] -> addRelationships ([ $relationships [ 2 ]]); $result = new Result ( new Message ( 'A result object with locationRelationship object' )); $result -> addLocations ([ $location [ 0 ]]); $result -> addRelatedLocations ([ $location [ 1 ], $location [ 2 ]]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"locationRelationship"},{"location":"reference/locationRelationship/#locationrelationship-object","text":"A locationRelationship object specifies one or more directed relationships from one location object, which we refer to as theSource, to another one, which we refer to as theTarget. See specification .","title":"locationRelationship object"},{"location":"reference/locationRelationship/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A result object with locationRelationship object\" }, \"locations\" : [ { \"id\" : 0 , \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"f.h\" }, \"region\" : { \"startLine\" : 42 } }, \"relationships\" : [ { \"target\" : 1 , \"kinds\" : [ \"isIncludedBy\" ] } ] } ], \"relatedLocations\" : [ { \"id\" : 1 , \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"g.h\" }, \"region\" : { \"startLine\" : 17 } }, \"relationships\" : [ { \"target\" : 0 , \"kinds\" : [ \"includes\" ] }, { \"target\" : 2 , \"kinds\" : [ \"isIncludedBy\" ] } ] }, { \"id\" : 2 , \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"g.c\" }, \"region\" : { \"startLine\" : 8 } }, \"relationships\" : [ { \"target\" : 1 , \"kinds\" : [ \"includes\" ] } ] } ] } ] } ] }","title":"Example"},{"location":"reference/locationRelationship/#how-to-generate","text":"See examples/locationRelationship.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\LocationRelationship ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $location = []; $physicalLocation = []; $artifactLocation = []; $region = []; $relationships = []; $location [ 0 ] = new Location (); $location [ 0 ] -> setId ( 0 ); $artifactLocation [ 0 ] = new ArtifactLocation (); $artifactLocation [ 0 ] -> setUri ( 'f.h' ); $physicalLocation [ 0 ] = new PhysicalLocation ( $artifactLocation [ 0 ]); $region [ 0 ] = new Region ( 42 ); $physicalLocation [ 0 ] -> setRegion ( $region [ 0 ]); $location [ 0 ] -> setPhysicalLocation ( $physicalLocation [ 0 ]); $relationships [ 0 ] = new LocationRelationship ( 1 ); $relationships [ 0 ] -> addKinds ([ 'isIncludedBy' ]); $location [ 0 ] -> addRelationships ([ $relationships [ 0 ]]); $location [ 1 ] = new Location (); $location [ 1 ] -> setId ( 1 ); $artifactLocation [ 1 ] = new ArtifactLocation (); $artifactLocation [ 1 ] -> setUri ( 'g.h' ); $physicalLocation [ 1 ] = new PhysicalLocation ( $artifactLocation [ 1 ]); $region [ 1 ] = new Region ( 17 ); $physicalLocation [ 1 ] -> setRegion ( $region [ 1 ]); $location [ 1 ] -> setPhysicalLocation ( $physicalLocation [ 1 ]); $relationships [ 1 ] = new LocationRelationship ( 0 ); $relationships [ 1 ] -> addKinds ([ 'includes' ]); $relationships [ 2 ] = new LocationRelationship ( 2 ); $relationships [ 2 ] -> addKinds ([ 'isIncludedBy' ]); $location [ 1 ] -> addRelationships ([ $relationships [ 1 ], $relationships [ 2 ]]); $location [ 2 ] = new Location (); $location [ 2 ] -> setId ( 2 ); $artifactLocation [ 2 ] = new ArtifactLocation (); $artifactLocation [ 2 ] -> setUri ( 'g.c' ); $physicalLocation [ 2 ] = new PhysicalLocation ( $artifactLocation [ 2 ]); $region [ 2 ] = new Region ( 8 ); $physicalLocation [ 2 ] -> setRegion ( $region [ 2 ]); $location [ 2 ] -> setPhysicalLocation ( $physicalLocation [ 2 ]); $relationships [ 2 ] = new LocationRelationship ( 1 ); $relationships [ 2 ] -> addKinds ([ 'includes' ]); $location [ 2 ] -> addRelationships ([ $relationships [ 2 ]]); $result = new Result ( new Message ( 'A result object with locationRelationship object' )); $result -> addLocations ([ $location [ 0 ]]); $result -> addRelatedLocations ([ $location [ 1 ], $location [ 2 ]]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/logicalLocation/","text":"logicalLocation object A logicalLocation object describes a logical location. A logical location is a location specified by a programmatic construct such as a namespace, a type, or a method, without regard to the physical location where the construct occurs. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"Psalm\" , \"version\" : \"4.x-dev\" , \"informationUri\" : \"https:\\/\\/psalm.de\" } }, \"logicalLocations\" : [ { \"name\" : \"Hook\" , \"fullyQualifiedName\" : \"Psalm\\\\Plugin\\\\Hook\" , \"kind\" : \"namespace\" }, { \"name\" : \"afterAnalysis\" , \"fullyQualifiedName\" : \"Psalm\\\\Plugin\\\\Hook\\\\AfterAnalysisInterface\\\\afterAnalysis\" , \"kind\" : \"function\" } ], \"results\" : [] } ] } How to generate See examples/logicalLocation.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\LogicalLocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'Psalm' ); $driver -> setInformationUri ( 'https://psalm.de' ); $driver -> setVersion ( '4.x-dev' ); $tool = new Tool ( $driver ); $nsLocation = new LogicalLocation (); $nsLocation -> setName ( 'Hook' ); $nsLocation -> setFullyQualifiedName ( 'Psalm\\Plugin\\Hook' ); $nsLocation -> setKind ( 'namespace' ); $funcLocation = new LogicalLocation (); $funcLocation -> setName ( 'afterAnalysis' ); $funcLocation -> setFullyQualifiedName ( 'Psalm\\Plugin\\Hook\\AfterAnalysisInterface\\afterAnalysis' ); $funcLocation -> setKind ( 'function' ); $run = new Run ( $tool ); $run -> addLogicalLocations ([ $nsLocation , $funcLocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"logicalLocation"},{"location":"reference/logicalLocation/#logicallocation-object","text":"A logicalLocation object describes a logical location. A logical location is a location specified by a programmatic construct such as a namespace, a type, or a method, without regard to the physical location where the construct occurs. See specification .","title":"logicalLocation object"},{"location":"reference/logicalLocation/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"Psalm\" , \"version\" : \"4.x-dev\" , \"informationUri\" : \"https:\\/\\/psalm.de\" } }, \"logicalLocations\" : [ { \"name\" : \"Hook\" , \"fullyQualifiedName\" : \"Psalm\\\\Plugin\\\\Hook\" , \"kind\" : \"namespace\" }, { \"name\" : \"afterAnalysis\" , \"fullyQualifiedName\" : \"Psalm\\\\Plugin\\\\Hook\\\\AfterAnalysisInterface\\\\afterAnalysis\" , \"kind\" : \"function\" } ], \"results\" : [] } ] }","title":"Example"},{"location":"reference/logicalLocation/#how-to-generate","text":"See examples/logicalLocation.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\LogicalLocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'Psalm' ); $driver -> setInformationUri ( 'https://psalm.de' ); $driver -> setVersion ( '4.x-dev' ); $tool = new Tool ( $driver ); $nsLocation = new LogicalLocation (); $nsLocation -> setName ( 'Hook' ); $nsLocation -> setFullyQualifiedName ( 'Psalm\\Plugin\\Hook' ); $nsLocation -> setKind ( 'namespace' ); $funcLocation = new LogicalLocation (); $funcLocation -> setName ( 'afterAnalysis' ); $funcLocation -> setFullyQualifiedName ( 'Psalm\\Plugin\\Hook\\AfterAnalysisInterface\\afterAnalysis' ); $funcLocation -> setKind ( 'function' ); $run = new Run ( $tool ); $run -> addLogicalLocations ([ $nsLocation , $funcLocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/message/","text":"message object Certain objects in this document define messages intended to be viewed by a user. SARIF represents such a message with a message object, which offers the following features: Message strings in plain text (\u201cplain text messages\u201d). Message strings that incorporate formatting information (\u201cformatted messages\u201d) in GitHub Flavored Markdown. Message strings with placeholders for variable information. Message strings with embedded links. See specification . PlainText Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"ESLint\" , \"semanticVersion\" : \"8.1.0\" , \"informationUri\" : \"https:\\/\\/eslint.org\" , \"rules\" : [ { \"id\" : \"no-unused-vars\" , \"shortDescription\" : { \"text\" : \"disallow unused variables\" }, \"helpUri\" : \"https:\\/\\/eslint.org\\/docs\\/rules\\/no-unused-vars\" , \"properties\" : { \"category\" : \"Variables\" } } ] } }, \"results\" : [ { \"message\" : { \"text\" : \"'x' is assigned a value but never used.\" }, \"ruleId\" : \"no-unused-vars\" , \"ruleIndex\" : 0 , \"level\" : \"error\" } ] } ] } Formatted Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Variable '{0}' is uninitialized.\" , \"arguments\" : [ \"pBuffer\" ] }, \"ruleId\" : \"CA2101\" } ] } ] } Embedded links Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Tainted data was used. The data came from [here](3).\" }, \"ruleId\" : \"TNT0001\" , \"relatedLocations\" : [ { \"id\" : 3 , \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"file:\\/\\/\\/C:\\/code\\/input.c\" }, \"region\" : { \"startLine\" : 25 , \"startColumn\" : 19 } } } ] } ] } ] } String lookup Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CS0001\" , \"messageStrings\" : { \"default\" : { \"text\" : \"This is the message text. It might be very long.\" } } } ] } }, \"results\" : [ { \"message\" : { \"id\" : \"default\" }, \"ruleId\" : \"CS0001\" , \"ruleIndex\" : 0 } ] } ] } How to generate See examples/message/plainText.php script. <?php use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PropertyBag ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'ESLint' ); $driver -> setInformationUri ( 'https://eslint.org' ); $driver -> setSemanticVersion ( '8.1.0' ); $rule = new ReportingDescriptor ( 'no-unused-vars' ); $rule -> setShortDescription ( new MultiformatMessageString ( 'disallow unused variables' )); $rule -> setHelpUri ( 'https://eslint.org/docs/rules/no-unused-vars' ); $properties = new PropertyBag (); $properties -> addProperty ( 'category' , 'Variables' ); $rule -> setProperties ( $properties ); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $message = new Message ( \"'x' is assigned a value but never used.\" ); $result = new Result ( $message ); $result -> setLevel ( 'error' ); $result -> setRuleId ( 'no-unused-vars' ); $result -> setRuleIndex ( 0 ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; } See examples/message/formatted.php script. <?php use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $message = new Message ( \"Variable '{0}' is uninitialized.\" ); $message -> addArguments ([ 'pBuffer' ]); $result = new Result ( $message ); $result -> setRuleId ( 'CA2101' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; } See examples/message/embeddedLinks.php <?php use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $message = new Message ( 'Tainted data was used. The data came from [here](3).' ); $result = new Result ( $message ); $result -> setRuleId ( 'TNT0001' ); $location = new Location (); $location -> setId ( '3' ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'file:///C:/code/input.c' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 25 , 19 )); $location -> setPhysicalLocation ( $physicalLocation ); $result -> addRelatedLocations ([ $location ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; } See examples/message/stringLookup.php <?php use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'no-unused-vars' ); $rule -> setId ( 'CS0001' ); $rule -> addMessageStrings ([ 'default' => new MultiformatMessageString ( 'This is the message text. It might be very long.' ), ]); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $message = new Message ( 'A message object can directly contain message strings in its text and markdown properties.' . ' It can also indirectly refer to message strings through its id property.' ); $result = new Result ( $message ); $result -> setRuleId ( 'CS0001' ); $result -> setRuleIndex ( 0 ); $result -> setMessage ( new Message ( '' , 'default' )); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Message"},{"location":"reference/message/#message-object","text":"Certain objects in this document define messages intended to be viewed by a user. SARIF represents such a message with a message object, which offers the following features: Message strings in plain text (\u201cplain text messages\u201d). Message strings that incorporate formatting information (\u201cformatted messages\u201d) in GitHub Flavored Markdown. Message strings with placeholders for variable information. Message strings with embedded links. See specification .","title":"message object"},{"location":"reference/message/#plaintext-example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"ESLint\" , \"semanticVersion\" : \"8.1.0\" , \"informationUri\" : \"https:\\/\\/eslint.org\" , \"rules\" : [ { \"id\" : \"no-unused-vars\" , \"shortDescription\" : { \"text\" : \"disallow unused variables\" }, \"helpUri\" : \"https:\\/\\/eslint.org\\/docs\\/rules\\/no-unused-vars\" , \"properties\" : { \"category\" : \"Variables\" } } ] } }, \"results\" : [ { \"message\" : { \"text\" : \"'x' is assigned a value but never used.\" }, \"ruleId\" : \"no-unused-vars\" , \"ruleIndex\" : 0 , \"level\" : \"error\" } ] } ] }","title":"PlainText Example"},{"location":"reference/message/#formatted-example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Variable '{0}' is uninitialized.\" , \"arguments\" : [ \"pBuffer\" ] }, \"ruleId\" : \"CA2101\" } ] } ] }","title":"Formatted Example"},{"location":"reference/message/#embedded-links-example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Tainted data was used. The data came from [here](3).\" }, \"ruleId\" : \"TNT0001\" , \"relatedLocations\" : [ { \"id\" : 3 , \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"file:\\/\\/\\/C:\\/code\\/input.c\" }, \"region\" : { \"startLine\" : 25 , \"startColumn\" : 19 } } } ] } ] } ] }","title":"Embedded links Example"},{"location":"reference/message/#string-lookup-example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CS0001\" , \"messageStrings\" : { \"default\" : { \"text\" : \"This is the message text. It might be very long.\" } } } ] } }, \"results\" : [ { \"message\" : { \"id\" : \"default\" }, \"ruleId\" : \"CS0001\" , \"ruleIndex\" : 0 } ] } ] }","title":"String lookup Example"},{"location":"reference/message/#how-to-generate","text":"See examples/message/plainText.php script. <?php use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PropertyBag ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'ESLint' ); $driver -> setInformationUri ( 'https://eslint.org' ); $driver -> setSemanticVersion ( '8.1.0' ); $rule = new ReportingDescriptor ( 'no-unused-vars' ); $rule -> setShortDescription ( new MultiformatMessageString ( 'disallow unused variables' )); $rule -> setHelpUri ( 'https://eslint.org/docs/rules/no-unused-vars' ); $properties = new PropertyBag (); $properties -> addProperty ( 'category' , 'Variables' ); $rule -> setProperties ( $properties ); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $message = new Message ( \"'x' is assigned a value but never used.\" ); $result = new Result ( $message ); $result -> setLevel ( 'error' ); $result -> setRuleId ( 'no-unused-vars' ); $result -> setRuleIndex ( 0 ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; } See examples/message/formatted.php script. <?php use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $message = new Message ( \"Variable '{0}' is uninitialized.\" ); $message -> addArguments ([ 'pBuffer' ]); $result = new Result ( $message ); $result -> setRuleId ( 'CA2101' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; } See examples/message/embeddedLinks.php <?php use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $message = new Message ( 'Tainted data was used. The data came from [here](3).' ); $result = new Result ( $message ); $result -> setRuleId ( 'TNT0001' ); $location = new Location (); $location -> setId ( '3' ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'file:///C:/code/input.c' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 25 , 19 )); $location -> setPhysicalLocation ( $physicalLocation ); $result -> addRelatedLocations ([ $location ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; } See examples/message/stringLookup.php <?php use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ , 2 ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'no-unused-vars' ); $rule -> setId ( 'CS0001' ); $rule -> addMessageStrings ([ 'default' => new MultiformatMessageString ( 'This is the message text. It might be very long.' ), ]); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $message = new Message ( 'A message object can directly contain message strings in its text and markdown properties.' . ' It can also indirectly refer to message strings through its id property.' ); $result = new Result ( $message ); $result -> setRuleId ( 'CS0001' ); $result -> setRuleIndex ( 0 ); $result -> setMessage ( new Message ( '' , 'default' )); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/node/","text":"node object A node object represents a node in the graph represented by the containing graph object, which we refer to as theGraph. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on this graph\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" }, { \"id\" : \"n1\" , \"children\" : [ { \"id\" : \"n3\" } ] } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n3\" , \"targetNodeId\" : \"n4\" } ] } ] } ] } ] } How to generate See examples/graph.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Rectangle ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 1 ] -> addChildren ([ $nodes [ 3 ]]); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n3' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $result = new Result ( new Message ( 'Have a look on this graph' )); $result -> addGraphs ([ $graph ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Node"},{"location":"reference/node/#node-object","text":"A node object represents a node in the graph represented by the containing graph object, which we refer to as theGraph. See specification .","title":"node object"},{"location":"reference/node/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on this graph\" }, \"graphs\" : [ { \"nodes\" : [ { \"id\" : \"n2\" }, { \"id\" : \"n3\" }, { \"id\" : \"n4\" }, { \"id\" : \"n1\" , \"children\" : [ { \"id\" : \"n3\" } ] } ], \"edges\" : [ { \"id\" : \"e1\" , \"sourceNodeId\" : \"n3\" , \"targetNodeId\" : \"n4\" } ] } ] } ] } ] }","title":"Example"},{"location":"reference/node/#how-to-generate","text":"See examples/graph.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Edge ; use Bartlett\\Sarif\\Definition\\Graph ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Node ; use Bartlett\\Sarif\\Definition\\Rectangle ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $nodes = []; $nodes [ 2 ] = new Node ( 'n2' ); $nodes [ 3 ] = new Node ( 'n3' ); $nodes [ 4 ] = new Node ( 'n4' ); $nodes [ 1 ] = new Node ( 'n1' ); $nodes [ 1 ] -> addChildren ([ $nodes [ 3 ]]); $edges = []; $edges [ 1 ] = new Edge ( 'e1' , 'n3' , 'n4' ); $graph = new Graph (); $graph -> addNodes ( $nodes ); $graph -> addEdges ( $edges ); $result = new Result ( new Message ( 'Have a look on this graph' )); $result -> addGraphs ([ $graph ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/notification/","text":"notification object A notification object describes a condition encountered during the execution of an analysis tool which is relevant to the operation of the tool itself, as opposed to being relevant to an artifact being analyzed by the tool. Conditions relevant to artifacts being analyzed by a tool are represented by result objects. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"First version of rule.\" } }, { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"Second version of rule.\" } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"toolExecutionNotifications\" : [ { \"message\" : { \"text\" : \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" }, \"level\" : \"error\" , \"descriptor\" : { \"index\" : 1 , \"id\" : \"CTN9999\" } } ] } ], \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CTN9999\" } ] } ] } How to generate See examples/reportingDescriptorReference.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Notification ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $ruleV1 = new ReportingDescriptor ( 'CTN9999' ); $ruleV1 -> setShortDescription ( new MultiformatMessageString ( 'First version of rule.' )); $ruleV2 = new ReportingDescriptor ( 'CTN9999' ); $ruleV2 -> setShortDescription ( new MultiformatMessageString ( 'Second version of rule.' )); $driver -> addRules ([ $ruleV1 , $ruleV2 ]); $tool = new Tool ( $driver ); $notification = new Notification ( new Message ( \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" )); $notification -> setAssociatedRule ( new ReportingDescriptorReference ( 0 , 'C2001' )); $notification -> setDescriptor ( new ReportingDescriptorReference ( 1 , 'CTN9999' )); $notification -> setLevel ( 'error' ); $invocation = new Invocation ( true ); $invocation -> addToolExecutionNotifications ([ $notification ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CTN9999' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Notification"},{"location":"reference/notification/#notification-object","text":"A notification object describes a condition encountered during the execution of an analysis tool which is relevant to the operation of the tool itself, as opposed to being relevant to an artifact being analyzed by the tool. Conditions relevant to artifacts being analyzed by a tool are represented by result objects. See specification .","title":"notification object"},{"location":"reference/notification/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"First version of rule.\" } }, { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"Second version of rule.\" } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"toolExecutionNotifications\" : [ { \"message\" : { \"text\" : \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" }, \"level\" : \"error\" , \"descriptor\" : { \"index\" : 1 , \"id\" : \"CTN9999\" } } ] } ], \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CTN9999\" } ] } ] }","title":"Example"},{"location":"reference/notification/#how-to-generate","text":"See examples/reportingDescriptorReference.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Notification ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $ruleV1 = new ReportingDescriptor ( 'CTN9999' ); $ruleV1 -> setShortDescription ( new MultiformatMessageString ( 'First version of rule.' )); $ruleV2 = new ReportingDescriptor ( 'CTN9999' ); $ruleV2 -> setShortDescription ( new MultiformatMessageString ( 'Second version of rule.' )); $driver -> addRules ([ $ruleV1 , $ruleV2 ]); $tool = new Tool ( $driver ); $notification = new Notification ( new Message ( \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" )); $notification -> setAssociatedRule ( new ReportingDescriptorReference ( 0 , 'C2001' )); $notification -> setDescriptor ( new ReportingDescriptorReference ( 1 , 'CTN9999' )); $notification -> setLevel ( 'error' ); $invocation = new Invocation ( true ); $invocation -> addToolExecutionNotifications ([ $notification ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CTN9999' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/physicalLocation/","text":"physicalLocation object A physicalLocation object represents the physical location where a result was detected. A physical location specifies a reference to an artifact together with a region within that artifact. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Identify a physical location where a result was detected.\" }, \"locations\" : [ { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"ui\\/window.c\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 42 } } } ] } ] } ] } How to generate See examples/physicalLocation.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'ui/window.c' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $result = new Result ( new Message ( 'Identify a physical location where a result was detected.' )); $location = new Location (); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 42 )); $location -> setPhysicalLocation ( $physicalLocation ); $result -> addLocations ([ $location ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"physicalLocation"},{"location":"reference/physicalLocation/#physicallocation-object","text":"A physicalLocation object represents the physical location where a result was detected. A physical location specifies a reference to an artifact together with a region within that artifact. See specification .","title":"physicalLocation object"},{"location":"reference/physicalLocation/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Identify a physical location where a result was detected.\" }, \"locations\" : [ { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"ui\\/window.c\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 42 } } } ] } ] } ] }","title":"Example"},{"location":"reference/physicalLocation/#how-to-generate","text":"See examples/physicalLocation.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'ui/window.c' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $result = new Result ( new Message ( 'Identify a physical location where a result was detected.' )); $location = new Location (); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 42 )); $location -> setPhysicalLocation ( $physicalLocation ); $result -> addLocations ([ $location ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/rectangle/","text":"rectangle object A rectangle object specifies a rectangular area within an image. When a SARIF viewer displays an image, it MAY indicate the presence of these areas, for example, by highlighting them or surrounding them with a border. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on screen shot provided\" }, \"attachments\" : [ { \"artifactLocation\" : { \"uri\" : \"file:\\/\\/\\/C:\\/ScanOutput\\/image001.png\" }, \"description\" : { \"text\" : \"Screen shot\" }, \"rectangles\" : [ { \"top\" : 80 , \"left\" : 10 , \"bottom\" : 5 , \"right\" : 90 } ] } ] } ] } ] } How to generate See examples/rectangle.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Rectangle ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $attachment = new Attachment (); $attachment -> setDescription ( new Message ( 'Screen shot' )); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'file:///C:/ScanOutput/image001.png' ); $attachment -> setArtifactLocation ( $artifactLocation ); $rectangle = new Rectangle (); $rectangle -> setTop ( 80 ); $rectangle -> setLeft ( 10 ); $rectangle -> setBottom ( 5 ); $rectangle -> setRight ( 90 ); $attachment -> addRectangles ([ $rectangle ]); $result = new Result ( new Message ( 'Have a look on screen shot provided' )); $result -> addAttachments ([ $attachment ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Rectangle"},{"location":"reference/rectangle/#rectangle-object","text":"A rectangle object specifies a rectangular area within an image. When a SARIF viewer displays an image, it MAY indicate the presence of these areas, for example, by highlighting them or surrounding them with a border. See specification .","title":"rectangle object"},{"location":"reference/rectangle/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Have a look on screen shot provided\" }, \"attachments\" : [ { \"artifactLocation\" : { \"uri\" : \"file:\\/\\/\\/C:\\/ScanOutput\\/image001.png\" }, \"description\" : { \"text\" : \"Screen shot\" }, \"rectangles\" : [ { \"top\" : 80 , \"left\" : 10 , \"bottom\" : 5 , \"right\" : 90 } ] } ] } ] } ] }","title":"Example"},{"location":"reference/rectangle/#how-to-generate","text":"See examples/rectangle.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Attachment ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Rectangle ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $attachment = new Attachment (); $attachment -> setDescription ( new Message ( 'Screen shot' )); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'file:///C:/ScanOutput/image001.png' ); $attachment -> setArtifactLocation ( $artifactLocation ); $rectangle = new Rectangle (); $rectangle -> setTop ( 80 ); $rectangle -> setLeft ( 10 ); $rectangle -> setBottom ( 5 ); $rectangle -> setRight ( 90 ); $attachment -> addRectangles ([ $rectangle ]); $result = new Result ( new Message ( 'Have a look on screen shot provided' )); $result -> addAttachments ([ $attachment ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/replacement/","text":"replacement object A replacement object represents the replacement of a single region of an artifact. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"fixes\" : [ { \"artifactChanges\" : [ { \"artifactLocation\" : { \"uri\" : \"src\\/a.c\" }, \"replacements\" : [ { \"deletedRegion\" : { \"startLine\" : 1 , \"startColumn\" : 1 , \"endLine\" : 1 }, \"insertedContent\" : { \"text\" : \"\\/\\/ \" } } ] } ] } ] } ] } ] } How to generate See examples/fix.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactChange ; use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Fix ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Replacement ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'src/a.c' ); $replacement = new Replacement ( new Region ( 1 , 1 , 1 )); $insertedContent = new ArtifactContent (); $insertedContent -> setText ( '// ' ); $replacement -> setInsertedContent ( $insertedContent ); $artifactChange = new ArtifactChange ( $artifactLocation , [ $replacement ]); $fix = new Fix ([ $artifactChange ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CA1001' ); $result -> addFixes ([ $fix ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Replacement"},{"location":"reference/replacement/#replacement-object","text":"A replacement object represents the replacement of a single region of an artifact. See specification .","title":"replacement object"},{"location":"reference/replacement/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"fixes\" : [ { \"artifactChanges\" : [ { \"artifactLocation\" : { \"uri\" : \"src\\/a.c\" }, \"replacements\" : [ { \"deletedRegion\" : { \"startLine\" : 1 , \"startColumn\" : 1 , \"endLine\" : 1 }, \"insertedContent\" : { \"text\" : \"\\/\\/ \" } } ] } ] } ] } ] } ] }","title":"Example"},{"location":"reference/replacement/#how-to-generate","text":"See examples/fix.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactChange ; use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Fix ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Replacement ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'src/a.c' ); $replacement = new Replacement ( new Region ( 1 , 1 , 1 )); $insertedContent = new ArtifactContent (); $insertedContent -> setText ( '// ' ); $replacement -> setInsertedContent ( $insertedContent ); $artifactChange = new ArtifactChange ( $artifactLocation , [ $replacement ]); $fix = new Fix ([ $artifactChange ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CA1001' ); $result -> addFixes ([ $fix ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/reportingConfiguration/","text":"reportingConfiguration object A reportingConfiguration object contains the information in a reportingDescriptor that a SARIF producer can modify at runtime, before executing its scan. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"SA2707\" , \"name\" : \"LimitSourceLineLength\" , \"shortDescription\" : { \"text\" : \"Limit source line length for readability.\" }, \"defaultConfiguration\" : { \"enabled\" : true , \"level\" : \"warning\" , \"rank\" : -1 , \"parameters\" : { \"maxLength\" : 120 } } } ] } }, \"results\" : [] } ] } How to generate See examples/reportingConfiguration.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PropertyBag ; use Bartlett\\Sarif\\Definition\\ReportingConfiguration ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'SA2707' ); $rule -> setName ( 'LimitSourceLineLength' ); $rule -> setShortDescription ( new MultiformatMessageString ( 'Limit source line length for readability.' )); $reportingConf = new ReportingConfiguration (); $propertyBag = new PropertyBag (); $propertyBag -> addProperty ( 'maxLength' , 120 ); $reportingConf -> setParameters ( $propertyBag ); $rule -> setDefaultConfiguration ( $reportingConf ); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"reportingConfiguration"},{"location":"reference/reportingConfiguration/#reportingconfiguration-object","text":"A reportingConfiguration object contains the information in a reportingDescriptor that a SARIF producer can modify at runtime, before executing its scan. See specification .","title":"reportingConfiguration object"},{"location":"reference/reportingConfiguration/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"SA2707\" , \"name\" : \"LimitSourceLineLength\" , \"shortDescription\" : { \"text\" : \"Limit source line length for readability.\" }, \"defaultConfiguration\" : { \"enabled\" : true , \"level\" : \"warning\" , \"rank\" : -1 , \"parameters\" : { \"maxLength\" : 120 } } } ] } }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/reportingConfiguration/#how-to-generate","text":"See examples/reportingConfiguration.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PropertyBag ; use Bartlett\\Sarif\\Definition\\ReportingConfiguration ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'SA2707' ); $rule -> setName ( 'LimitSourceLineLength' ); $rule -> setShortDescription ( new MultiformatMessageString ( 'Limit source line length for readability.' )); $reportingConf = new ReportingConfiguration (); $propertyBag = new PropertyBag (); $propertyBag -> addProperty ( 'maxLength' , 120 ); $reportingConf -> setParameters ( $propertyBag ); $rule -> setDefaultConfiguration ( $reportingConf ); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/reportingDescriptor/","text":"reportingDescriptor object A reportingDescriptor object contains information that describes a \"reporting item\" generated by a tool. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA1001\" , \"deprecatedIds\" : [ \"CA1000\" ] }, { \"id\" : \"CA1002\" , \"deprecatedIds\" : [ \"CA1000\" ] } ] } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"suppressions\" : [ { \"kind\" : \"inSource\" } ], \"baselineState\" : \"unchanged\" }, { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1002\" , \"suppressions\" : [ { \"kind\" : \"inSource\" } ], \"baselineState\" : \"updated\" } ] } ] } How to generate See examples/reportingDescriptor.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Suppression ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule1 = new ReportingDescriptor ( 'CA1001' ); $rule1 -> addDeprecatedIds ([ 'CA1000' ]); $rule2 = new ReportingDescriptor ( 'CA1002' ); $rule2 -> addDeprecatedIds ([ 'CA1000' ]); $driver -> addRules ([ $rule1 , $rule2 ]); $tool = new Tool ( $driver ); $results = []; $results [ 0 ] = new Result ( new Message ( '...' )); $results [ 0 ] -> setRuleId ( 'CA1001' ); $results [ 0 ] -> setBaselineState ( 'unchanged' ); $suppression = new Suppression ( 'inSource' ); $results [ 0 ] -> addSuppressions ([ $suppression ]); $results [ 1 ] = new Result ( new Message ( '...' )); $results [ 1 ] -> setRuleId ( 'CA1002' ); $results [ 1 ] -> setBaselineState ( 'updated' ); $suppression = new Suppression ( 'inSource' ); $results [ 1 ] -> addSuppressions ([ $suppression ]); $run = new Run ( $tool ); $run -> addResults ( $results ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"reportingDescriptor"},{"location":"reference/reportingDescriptor/#reportingdescriptor-object","text":"A reportingDescriptor object contains information that describes a \"reporting item\" generated by a tool. See specification .","title":"reportingDescriptor object"},{"location":"reference/reportingDescriptor/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA1001\" , \"deprecatedIds\" : [ \"CA1000\" ] }, { \"id\" : \"CA1002\" , \"deprecatedIds\" : [ \"CA1000\" ] } ] } }, \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1001\" , \"suppressions\" : [ { \"kind\" : \"inSource\" } ], \"baselineState\" : \"unchanged\" }, { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CA1002\" , \"suppressions\" : [ { \"kind\" : \"inSource\" } ], \"baselineState\" : \"updated\" } ] } ] }","title":"Example"},{"location":"reference/reportingDescriptor/#how-to-generate","text":"See examples/reportingDescriptor.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Suppression ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule1 = new ReportingDescriptor ( 'CA1001' ); $rule1 -> addDeprecatedIds ([ 'CA1000' ]); $rule2 = new ReportingDescriptor ( 'CA1002' ); $rule2 -> addDeprecatedIds ([ 'CA1000' ]); $driver -> addRules ([ $rule1 , $rule2 ]); $tool = new Tool ( $driver ); $results = []; $results [ 0 ] = new Result ( new Message ( '...' )); $results [ 0 ] -> setRuleId ( 'CA1001' ); $results [ 0 ] -> setBaselineState ( 'unchanged' ); $suppression = new Suppression ( 'inSource' ); $results [ 0 ] -> addSuppressions ([ $suppression ]); $results [ 1 ] = new Result ( new Message ( '...' )); $results [ 1 ] -> setRuleId ( 'CA1002' ); $results [ 1 ] -> setBaselineState ( 'updated' ); $suppression = new Suppression ( 'inSource' ); $results [ 1 ] -> addSuppressions ([ $suppression ]); $run = new Run ( $tool ); $run -> addResults ( $results ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/reportingDescriptorReference/","text":"reportingDescriptorReference object A reportingDescriptorReference object identifies a particular reportingDescriptor object, which we refer to as theDescriptor, among all reportingDescriptor objects defined by theTool, including those defined by theTool.driver and theTool.extensions. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"First version of rule.\" } }, { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"Second version of rule.\" } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"toolExecutionNotifications\" : [ { \"message\" : { \"text\" : \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" }, \"level\" : \"error\" , \"descriptor\" : { \"index\" : 1 , \"id\" : \"CTN9999\" } } ] } ], \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CTN9999\" } ] } ] } How to generate See examples/reportingDescriptorReference.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Notification ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $ruleV1 = new ReportingDescriptor ( 'CTN9999' ); $ruleV1 -> setShortDescription ( new MultiformatMessageString ( 'First version of rule.' )); $ruleV2 = new ReportingDescriptor ( 'CTN9999' ); $ruleV2 -> setShortDescription ( new MultiformatMessageString ( 'Second version of rule.' )); $driver -> addRules ([ $ruleV1 , $ruleV2 ]); $tool = new Tool ( $driver ); $notification = new Notification ( new Message ( \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" )); $notification -> setAssociatedRule ( new ReportingDescriptorReference ( 0 , 'C2001' )); $notification -> setDescriptor ( new ReportingDescriptorReference ( 1 , 'CTN9999' )); $notification -> setLevel ( 'error' ); $invocation = new Invocation ( true ); $invocation -> addToolExecutionNotifications ([ $notification ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CTN9999' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"reportingDescriptorReference"},{"location":"reference/reportingDescriptorReference/#reportingdescriptorreference-object","text":"A reportingDescriptorReference object identifies a particular reportingDescriptor object, which we refer to as theDescriptor, among all reportingDescriptor objects defined by theTool, including those defined by theTool.driver and theTool.extensions. See specification .","title":"reportingDescriptorReference object"},{"location":"reference/reportingDescriptorReference/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"First version of rule.\" } }, { \"id\" : \"CTN9999\" , \"shortDescription\" : { \"text\" : \"Second version of rule.\" } } ] } }, \"invocations\" : [ { \"executionSuccessful\" : true , \"toolExecutionNotifications\" : [ { \"message\" : { \"text\" : \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" }, \"level\" : \"error\" , \"descriptor\" : { \"index\" : 1 , \"id\" : \"CTN9999\" } } ] } ], \"results\" : [ { \"message\" : { \"text\" : \"...\" }, \"ruleId\" : \"CTN9999\" } ] } ] }","title":"Example"},{"location":"reference/reportingDescriptorReference/#how-to-generate","text":"See examples/reportingDescriptorReference.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Notification ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $ruleV1 = new ReportingDescriptor ( 'CTN9999' ); $ruleV1 -> setShortDescription ( new MultiformatMessageString ( 'First version of rule.' )); $ruleV2 = new ReportingDescriptor ( 'CTN9999' ); $ruleV2 -> setShortDescription ( new MultiformatMessageString ( 'Second version of rule.' )); $driver -> addRules ([ $ruleV1 , $ruleV2 ]); $tool = new Tool ( $driver ); $notification = new Notification ( new Message ( \"Exception evaluating rule 'C2001'. Rule configuration is missing.\" )); $notification -> setAssociatedRule ( new ReportingDescriptorReference ( 0 , 'C2001' )); $notification -> setDescriptor ( new ReportingDescriptorReference ( 1 , 'CTN9999' )); $notification -> setLevel ( 'error' ); $invocation = new Invocation ( true ); $invocation -> addToolExecutionNotifications ([ $notification ]); $result = new Result ( new Message ( '...' )); $result -> setRuleId ( 'CTN9999' ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $run -> addInvocations ([ $invocation ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/reportingDescriptorRelationship/","text":"reportingDescriptorRelationship object A reportingDescriptorRelationship object specifies one or more directed relationships from one reportingDescriptor object, which we refer to as theSource, to another one, which we refer to as theTarget. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA1000\" , \"relationships\" : [ { \"target\" : { \"index\" : 0 , \"id\" : \"327\" , \"guid\" : \"33333333-0000-1111-8888-111111111111\" , \"toolComponent\" : { \"name\" : \"CWE\" , \"guid\" : \"33333333-0000-1111-8888-000000000000\" } }, \"kinds\" : [ \"superset\" ] } ] } ] } }, \"results\" : [] } ] } How to generate See examples/reportingDescriptorRelationship.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorRelationship ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\ToolComponentReference ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'CA1000' ); $target = new ReportingDescriptorReference ( 0 , '327' , '33333333-0000-1111-8888-111111111111' ); $toolComponent = new ToolComponentReference (); $toolComponent -> setName ( 'CWE' ); $toolComponent -> setGuid ( '33333333-0000-1111-8888-000000000000' ); $target -> setToolComponent ( $toolComponent ); $relationship = new ReportingDescriptorRelationship ( $target ); $relationship -> addKinds ([ 'superset' ]); $rule -> addRelationships ([ $relationship ]); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"reportingDescriptorRelationship"},{"location":"reference/reportingDescriptorRelationship/#reportingdescriptorrelationship-object","text":"A reportingDescriptorRelationship object specifies one or more directed relationships from one reportingDescriptor object, which we refer to as theSource, to another one, which we refer to as theTarget. See specification .","title":"reportingDescriptorRelationship object"},{"location":"reference/reportingDescriptorRelationship/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA1000\" , \"relationships\" : [ { \"target\" : { \"index\" : 0 , \"id\" : \"327\" , \"guid\" : \"33333333-0000-1111-8888-111111111111\" , \"toolComponent\" : { \"name\" : \"CWE\" , \"guid\" : \"33333333-0000-1111-8888-000000000000\" } }, \"kinds\" : [ \"superset\" ] } ] } ] } }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/reportingDescriptorRelationship/#how-to-generate","text":"See examples/reportingDescriptorRelationship.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorRelationship ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\ToolComponentReference ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'CA1000' ); $target = new ReportingDescriptorReference ( 0 , '327' , '33333333-0000-1111-8888-111111111111' ); $toolComponent = new ToolComponentReference (); $toolComponent -> setName ( 'CWE' ); $toolComponent -> setGuid ( '33333333-0000-1111-8888-000000000000' ); $target -> setToolComponent ( $toolComponent ); $relationship = new ReportingDescriptorRelationship ( $target ); $relationship -> addKinds ([ 'superset' ]); $rule -> addRelationships ([ $relationship ]); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/result/","text":"result object A result object describes a single result detected by an analysis tool. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA2101\" , \"shortDescription\" : { \"text\" : \"Specify marshaling for P\\/Invoke string arguments.\" } }, { \"id\" : \"CA5350\" , \"shortDescription\" : { \"text\" : \"Do not use weak cryptographic algorithms.\" } } ] } }, \"results\" : [ { \"message\" : { \"text\" : \"Result on rule 0\" }, \"ruleId\" : \"CA2101\" , \"ruleIndex\" : 0 }, { \"message\" : { \"text\" : \"Result on rule 1\" }, \"ruleId\" : \"CA5350\\/md5\" , \"ruleIndex\" : 1 }, { \"message\" : { \"text\" : \"Another result on rule 1\" }, \"ruleId\" : \"CA5350\\/sha-1\" , \"ruleIndex\" : 1 } ] } ] } How to generate See examples/result.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule1 = new ReportingDescriptor ( 'CA2101' ); $rule1 -> setShortDescription ( new MultiformatMessageString ( 'Specify marshaling for P/Invoke string arguments.' ) ); $rule2 = new ReportingDescriptor ( 'CA5350' ); $rule2 -> setShortDescription ( new MultiformatMessageString ( 'Do not use weak cryptographic algorithms.' ) ); $driver -> addRules ([ $rule1 , $rule2 ]); $tool = new Tool ( $driver ); $result1 = new Result ( new Message ( 'Result on rule 0' )); $result1 -> setRuleId ( 'CA2101' ); $result1 -> setRuleIndex ( 0 ); $result2 = new Result ( new Message ( 'Result on rule 1' )); $result2 -> setRuleId ( 'CA5350/md5' ); $result2 -> setRuleIndex ( 1 ); $result3 = new Result ( new Message ( 'Another result on rule 1' )); $result3 -> setRuleId ( 'CA5350/sha-1' ); $result3 -> setRuleIndex ( 1 ); $run = new Run ( $tool ); $run -> addResults ([ $result1 , $result2 , $result3 ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Result"},{"location":"reference/result/#result-object","text":"A result object describes a single result detected by an analysis tool. See specification .","title":"result object"},{"location":"reference/result/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA2101\" , \"shortDescription\" : { \"text\" : \"Specify marshaling for P\\/Invoke string arguments.\" } }, { \"id\" : \"CA5350\" , \"shortDescription\" : { \"text\" : \"Do not use weak cryptographic algorithms.\" } } ] } }, \"results\" : [ { \"message\" : { \"text\" : \"Result on rule 0\" }, \"ruleId\" : \"CA2101\" , \"ruleIndex\" : 0 }, { \"message\" : { \"text\" : \"Result on rule 1\" }, \"ruleId\" : \"CA5350\\/md5\" , \"ruleIndex\" : 1 }, { \"message\" : { \"text\" : \"Another result on rule 1\" }, \"ruleId\" : \"CA5350\\/sha-1\" , \"ruleIndex\" : 1 } ] } ] }","title":"Example"},{"location":"reference/result/#how-to-generate","text":"See examples/result.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule1 = new ReportingDescriptor ( 'CA2101' ); $rule1 -> setShortDescription ( new MultiformatMessageString ( 'Specify marshaling for P/Invoke string arguments.' ) ); $rule2 = new ReportingDescriptor ( 'CA5350' ); $rule2 -> setShortDescription ( new MultiformatMessageString ( 'Do not use weak cryptographic algorithms.' ) ); $driver -> addRules ([ $rule1 , $rule2 ]); $tool = new Tool ( $driver ); $result1 = new Result ( new Message ( 'Result on rule 0' )); $result1 -> setRuleId ( 'CA2101' ); $result1 -> setRuleIndex ( 0 ); $result2 = new Result ( new Message ( 'Result on rule 1' )); $result2 -> setRuleId ( 'CA5350/md5' ); $result2 -> setRuleIndex ( 1 ); $result3 = new Result ( new Message ( 'Another result on rule 1' )); $result3 -> setRuleId ( 'CA5350/sha-1' ); $result3 -> setRuleIndex ( 1 ); $run = new Run ( $tool ); $run -> addResults ([ $result1 , $result2 , $result3 ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/resultProvenance/","text":"resultProvenance object A resultProvenance object contains information about the how and when theResult was detected. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"SarifSamples\" , \"version\" : \"1.0\" , \"informationUri\" : \"https:\\/\\/github.com\\/microsoft\\/sarif-tutorials\\/\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Assertions are unreliable.\" }, \"ruleId\" : \"Assertions\" , \"provenance\" : { \"conversionSources\" : [ { \"artifactLocation\" : { \"uri\" : \"CodeScanner.log\" , \"uriBaseId\" : \"LOGSROOT\" }, \"region\" : { \"startLine\" : 3 , \"startColumn\" : 3 , \"endLine\" : 12 , \"endColumn\" : 13 , \"snippet\" : { \"text\" : \"<problem>...<\\/problem>\" } } } ] } } ] } ] } How to generate See examples/resultProvenance.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\ResultProvenance ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'SarifSamples' ); $driver -> setInformationUri ( 'https://github.com/microsoft/sarif-tutorials/' ); $driver -> setVersion ( '1.0' ); $tool = new Tool ( $driver ); $provenance = new ResultProvenance (); $fromSources = []; $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'CodeScanner.log' ); $artifactLocation -> setUriBaseId ( 'LOGSROOT' ); $fromSources [ 0 ] = new PhysicalLocation ( $artifactLocation ); $region = new Region ( 3 , 3 , 12 , 13 ); $snippet = new ArtifactContent (); $snippet -> setText ( '<problem>...</problem>' ); $region -> setSnippet ( $snippet ); $fromSources [ 0 ] -> setRegion ( $region ); $provenance -> addConversionSources ( $fromSources ); $result = new Result ( new Message ( 'Assertions are unreliable.' )); $result -> setRuleId ( 'Assertions' ); $result -> setProvenance ( $provenance ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"resultProvenance"},{"location":"reference/resultProvenance/#resultprovenance-object","text":"A resultProvenance object contains information about the how and when theResult was detected. See specification .","title":"resultProvenance object"},{"location":"reference/resultProvenance/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"SarifSamples\" , \"version\" : \"1.0\" , \"informationUri\" : \"https:\\/\\/github.com\\/microsoft\\/sarif-tutorials\\/\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Assertions are unreliable.\" }, \"ruleId\" : \"Assertions\" , \"provenance\" : { \"conversionSources\" : [ { \"artifactLocation\" : { \"uri\" : \"CodeScanner.log\" , \"uriBaseId\" : \"LOGSROOT\" }, \"region\" : { \"startLine\" : 3 , \"startColumn\" : 3 , \"endLine\" : 12 , \"endColumn\" : 13 , \"snippet\" : { \"text\" : \"<problem>...<\\/problem>\" } } } ] } } ] } ] }","title":"Example"},{"location":"reference/resultProvenance/#how-to-generate","text":"See examples/resultProvenance.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactContent ; use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\ResultProvenance ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'SarifSamples' ); $driver -> setInformationUri ( 'https://github.com/microsoft/sarif-tutorials/' ); $driver -> setVersion ( '1.0' ); $tool = new Tool ( $driver ); $provenance = new ResultProvenance (); $fromSources = []; $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'CodeScanner.log' ); $artifactLocation -> setUriBaseId ( 'LOGSROOT' ); $fromSources [ 0 ] = new PhysicalLocation ( $artifactLocation ); $region = new Region ( 3 , 3 , 12 , 13 ); $snippet = new ArtifactContent (); $snippet -> setText ( '<problem>...</problem>' ); $region -> setSnippet ( $snippet ); $fromSources [ 0 ] -> setRegion ( $region ); $provenance -> addConversionSources ( $fromSources ); $result = new Result ( new Message ( 'Assertions are unreliable.' )); $result -> setRuleId ( 'Assertions' ); $result -> setProvenance ( $provenance ); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/run/","text":"run object An sarifLog object specifies the version of the file format and contains the output from one or more runs. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"Psalm\" , \"version\" : \"4.x-dev\" , \"informationUri\" : \"https:\\/\\/psalm.de\" } }, \"properties\" : { \"stableId\" : \"Nightly static analysis run\" }, \"results\" : [] } ] } How to generate See examples/run.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\PropertyBag ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'Psalm' ); $driver -> setInformationUri ( 'https://psalm.de' ); $driver -> setVersion ( '4.x-dev' ); $tool = new Tool ( $driver ); $propertyBag = new PropertyBag (); $propertyBag -> addProperty ( 'stableId' , 'Nightly static analysis run' ); $run = new Run ( $tool ); $run -> setProperties ( $propertyBag ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Run"},{"location":"reference/run/#run-object","text":"An sarifLog object specifies the version of the file format and contains the output from one or more runs. See specification .","title":"run object"},{"location":"reference/run/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"Psalm\" , \"version\" : \"4.x-dev\" , \"informationUri\" : \"https:\\/\\/psalm.de\" } }, \"properties\" : { \"stableId\" : \"Nightly static analysis run\" }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/run/#how-to-generate","text":"See examples/run.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\PropertyBag ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'Psalm' ); $driver -> setInformationUri ( 'https://psalm.de' ); $driver -> setVersion ( '4.x-dev' ); $tool = new Tool ( $driver ); $propertyBag = new PropertyBag (); $propertyBag -> addProperty ( 'stableId' , 'Nightly static analysis run' ); $run = new Run ( $tool ); $run -> setProperties ( $propertyBag ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/runAutomationDetails/","text":"runAutomationDetails object A runAutomationDetails object contains information that specifies theRun\u2019s identity and role within an engineering system. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"automationDetails\" : { \"description\" : { \"text\" : \"This is the {0} nightly run of the Credential Scanner tool on all product binaries in the '{1}' branch of the '{2}' repo. The scanned binaries are architecture '{3}' and build type '{4}'.\" , \"arguments\" : [ \"October 10, 2018\" , \"master\" , \"sarif-sdk\" , \"x86\" , \"debug\" ] }, \"id\" : \"Nightly CredScan run for sarif-sdk\\/master\\/x86\\/debug\\/2018-10-05\" , \"guid\" : \"11111111-1111-1111-8888-111111111111\" , \"correlationGuid\" : \"22222222-2222-1111-8888-222222222222\" }, \"results\" : [] } ] } How to generate See examples/runAutomationDetails.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\RunAutomationDetails ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $automationDetails = new RunAutomationDetails (); $text = \"This is the {0} nightly run of the Credential Scanner tool on\" . \" all product binaries in the '{1}' branch of the '{2}' repo.\" . \" The scanned binaries are architecture '{3}' and build type '{4}'.\" ; $description = new Message ( $text ); $description -> addArguments ([ \"October 10, 2018\" , \"master\" , \"sarif-sdk\" , \"x86\" , \"debug\" , ]); $automationDetails -> setDescription ( $description ); $automationDetails -> setId ( 'Nightly CredScan run for sarif-sdk/master/x86/debug/2018-10-05' ); $automationDetails -> setGuid ( '11111111-1111-1111-8888-111111111111' ); $automationDetails -> setCorrelationGuid ( '22222222-2222-1111-8888-222222222222' ); $run = new Run ( $tool ); $run -> setAutomationDetails ( $automationDetails ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"runAutomationDetails"},{"location":"reference/runAutomationDetails/#runautomationdetails-object","text":"A runAutomationDetails object contains information that specifies theRun\u2019s identity and role within an engineering system. See specification .","title":"runAutomationDetails object"},{"location":"reference/runAutomationDetails/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"automationDetails\" : { \"description\" : { \"text\" : \"This is the {0} nightly run of the Credential Scanner tool on all product binaries in the '{1}' branch of the '{2}' repo. The scanned binaries are architecture '{3}' and build type '{4}'.\" , \"arguments\" : [ \"October 10, 2018\" , \"master\" , \"sarif-sdk\" , \"x86\" , \"debug\" ] }, \"id\" : \"Nightly CredScan run for sarif-sdk\\/master\\/x86\\/debug\\/2018-10-05\" , \"guid\" : \"11111111-1111-1111-8888-111111111111\" , \"correlationGuid\" : \"22222222-2222-1111-8888-222222222222\" }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/runAutomationDetails/#how-to-generate","text":"See examples/runAutomationDetails.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\RunAutomationDetails ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $tool = new Tool ( $driver ); $automationDetails = new RunAutomationDetails (); $text = \"This is the {0} nightly run of the Credential Scanner tool on\" . \" all product binaries in the '{1}' branch of the '{2}' repo.\" . \" The scanned binaries are architecture '{3}' and build type '{4}'.\" ; $description = new Message ( $text ); $description -> addArguments ([ \"October 10, 2018\" , \"master\" , \"sarif-sdk\" , \"x86\" , \"debug\" , ]); $automationDetails -> setDescription ( $description ); $automationDetails -> setId ( 'Nightly CredScan run for sarif-sdk/master/x86/debug/2018-10-05' ); $automationDetails -> setGuid ( '11111111-1111-1111-8888-111111111111' ); $automationDetails -> setCorrelationGuid ( '22222222-2222-1111-8888-222222222222' ); $run = new Run ( $tool ); $run -> setAutomationDetails ( $automationDetails ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/sarifLog/","text":"sariflog object An sarifLog object specifies the version of the file format and contains the output from one or more runs. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"Psalm\" } } } ] } How to generate See examples/sarifLog.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'Psalm' ); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"sarifLog"},{"location":"reference/sarifLog/#sariflog-object","text":"An sarifLog object specifies the version of the file format and contains the output from one or more runs. See specification .","title":"sariflog object"},{"location":"reference/sarifLog/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"Psalm\" } } } ] }","title":"Example"},{"location":"reference/sarifLog/#how-to-generate","text":"See examples/sarifLog.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'Psalm' ); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/specialLocations/","text":"specialLocations object A specialLocations object defines locations of special significance to SARIF consumers. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"originalUriBaseIds\" : { \"WEBHOST\" : { \"uri\" : \"http:\\/\\/www.example.com\\/\" }, \"ROOT\" : { \"uri\" : \"file:\\/\\/\\/\" }, \"HOME\" : { \"uri\" : \"home\\/user\\/\" , \"uriBaseId\" : \"ROOT\" }, \"PACKAGE\" : { \"uri\" : \"mySoftware\\/\" , \"uriBaseId\" : \"HOME\" }, \"SRC\" : { \"uri\" : \"src\\/\" , \"uriBaseId\" : \"PACKAGE\" } }, \"specialLocations\" : { \"displayBase\" : { \"uriBaseId\" : \"PACKAGE\" } }, \"results\" : [] } ] } How to generate See examples/specialLocations.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\SpecialLocations ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $webHost = new ArtifactLocation (); $webHost -> setUri ( 'http://www.example.com/' ); $root = new ArtifactLocation (); $root -> setUri ( 'file:///' ); $home = new ArtifactLocation (); $home -> setUri ( 'home/user/' ); $home -> setUriBaseId ( 'ROOT' ); $package = new ArtifactLocation (); $package -> setUri ( 'mySoftware/' ); $package -> setUriBaseId ( 'HOME' ); $src = new ArtifactLocation (); $src -> setUri ( 'src/' ); $src -> setUriBaseId ( 'PACKAGE' ); $run = new Run ( $tool ); $run -> addAdditionalProperties ([ 'WEBHOST' => $webHost , 'ROOT' => $root , 'HOME' => $home , 'PACKAGE' => $package , 'SRC' => $src , ]); $specialLocations = new SpecialLocations (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( '' ); $artifactLocation -> setUriBaseId ( 'PACKAGE' ); $specialLocations -> setDisplayBase ( $artifactLocation ); $run -> setSpecialLocations ( $specialLocations ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"specialLocations"},{"location":"reference/specialLocations/#speciallocations-object","text":"A specialLocations object defines locations of special significance to SARIF consumers. See specification .","title":"specialLocations object"},{"location":"reference/specialLocations/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"originalUriBaseIds\" : { \"WEBHOST\" : { \"uri\" : \"http:\\/\\/www.example.com\\/\" }, \"ROOT\" : { \"uri\" : \"file:\\/\\/\\/\" }, \"HOME\" : { \"uri\" : \"home\\/user\\/\" , \"uriBaseId\" : \"ROOT\" }, \"PACKAGE\" : { \"uri\" : \"mySoftware\\/\" , \"uriBaseId\" : \"HOME\" }, \"SRC\" : { \"uri\" : \"src\\/\" , \"uriBaseId\" : \"PACKAGE\" } }, \"specialLocations\" : { \"displayBase\" : { \"uriBaseId\" : \"PACKAGE\" } }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/specialLocations/#how-to-generate","text":"See examples/specialLocations.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\SpecialLocations ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $webHost = new ArtifactLocation (); $webHost -> setUri ( 'http://www.example.com/' ); $root = new ArtifactLocation (); $root -> setUri ( 'file:///' ); $home = new ArtifactLocation (); $home -> setUri ( 'home/user/' ); $home -> setUriBaseId ( 'ROOT' ); $package = new ArtifactLocation (); $package -> setUri ( 'mySoftware/' ); $package -> setUriBaseId ( 'HOME' ); $src = new ArtifactLocation (); $src -> setUri ( 'src/' ); $src -> setUriBaseId ( 'PACKAGE' ); $run = new Run ( $tool ); $run -> addAdditionalProperties ([ 'WEBHOST' => $webHost , 'ROOT' => $root , 'HOME' => $home , 'PACKAGE' => $package , 'SRC' => $src , ]); $specialLocations = new SpecialLocations (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( '' ); $artifactLocation -> setUriBaseId ( 'PACKAGE' ); $specialLocations -> setDisplayBase ( $artifactLocation ); $run -> setSpecialLocations ( $specialLocations ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/stack/","text":"stack object A stack object describes a single call stack. A call stack is a sequence of nested function calls, each of which is referred to as a stack frame. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"SarifSamples\" , \"version\" : \"1.0\" , \"informationUri\" : \"https:\\/\\/github.com\\/microsoft\\/sarif-tutorials\\/\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Uninitialized variable.\" }, \"ruleId\" : \"TUT1001\" , \"locations\" : [ { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"collections\\/list.h\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 15 } }, \"logicalLocations\" : [ { \"fullyQualifiedName\" : \"collections::list::add\" } ] } ], \"stacks\" : [ { \"frames\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"collections\\/list.h\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 110 , \"startColumn\" : 15 } }, \"logicalLocations\" : [ { \"fullyQualifiedName\" : \"collections::list::add_core\" } ] }, \"module\" : \"platform\" , \"threadId\" : 52 , \"parameters\" : [ \"null\" , \"0\" , \"14\" ] } ], \"message\" : { \"text\" : \"Call stack resulting from usage of uninitialized variable.\" } } ] } ] } ] } How to generate See examples/stack.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\LogicalLocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Stack ; use Bartlett\\Sarif\\Definition\\StackFrame ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'SarifSamples' ); $driver -> setInformationUri ( 'https://github.com/microsoft/sarif-tutorials/' ); $driver -> setVersion ( '1.0' ); $tool = new Tool ( $driver ); $frame = new StackFrame (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'collections/list.h' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 110 , 15 )); $location -> setPhysicalLocation ( $physicalLocation ); $logicalLocation = new LogicalLocation (); $logicalLocation -> setFullyQualifiedName ( 'collections::list::add_core' ); $location -> addLogicalLocations ([ $logicalLocation ]); $frame -> setLocation ( $location ); $frame -> setModule ( 'platform' ); $frame -> setThreadId ( 52 ); $frame -> addParameters ([ 'null' , '0' , '14' ]); $stack = new Stack ([ $frame ]); $stack -> setMessage ( new Message ( 'Call stack resulting from usage of uninitialized variable.' )); $result = new Result ( new Message ( 'Uninitialized variable.' )); $result -> addStacks ([ $stack ]); $result -> setRuleId ( 'TUT1001' ); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'collections/list.h' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 15 )); $location -> setPhysicalLocation ( $physicalLocation ); $logicalLocation = new LogicalLocation (); $logicalLocation -> setFullyQualifiedName ( 'collections::list::add' ); $location -> addLogicalLocations ([ $logicalLocation ]); $result -> addLocations ([ $location ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Stack"},{"location":"reference/stack/#stack-object","text":"A stack object describes a single call stack. A call stack is a sequence of nested function calls, each of which is referred to as a stack frame. See specification .","title":"stack object"},{"location":"reference/stack/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"SarifSamples\" , \"version\" : \"1.0\" , \"informationUri\" : \"https:\\/\\/github.com\\/microsoft\\/sarif-tutorials\\/\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Uninitialized variable.\" }, \"ruleId\" : \"TUT1001\" , \"locations\" : [ { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"collections\\/list.h\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 15 } }, \"logicalLocations\" : [ { \"fullyQualifiedName\" : \"collections::list::add\" } ] } ], \"stacks\" : [ { \"frames\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"collections\\/list.h\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 110 , \"startColumn\" : 15 } }, \"logicalLocations\" : [ { \"fullyQualifiedName\" : \"collections::list::add_core\" } ] }, \"module\" : \"platform\" , \"threadId\" : 52 , \"parameters\" : [ \"null\" , \"0\" , \"14\" ] } ], \"message\" : { \"text\" : \"Call stack resulting from usage of uninitialized variable.\" } } ] } ] } ] }","title":"Example"},{"location":"reference/stack/#how-to-generate","text":"See examples/stack.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\LogicalLocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Stack ; use Bartlett\\Sarif\\Definition\\StackFrame ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'SarifSamples' ); $driver -> setInformationUri ( 'https://github.com/microsoft/sarif-tutorials/' ); $driver -> setVersion ( '1.0' ); $tool = new Tool ( $driver ); $frame = new StackFrame (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'collections/list.h' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 110 , 15 )); $location -> setPhysicalLocation ( $physicalLocation ); $logicalLocation = new LogicalLocation (); $logicalLocation -> setFullyQualifiedName ( 'collections::list::add_core' ); $location -> addLogicalLocations ([ $logicalLocation ]); $frame -> setLocation ( $location ); $frame -> setModule ( 'platform' ); $frame -> setThreadId ( 52 ); $frame -> addParameters ([ 'null' , '0' , '14' ]); $stack = new Stack ([ $frame ]); $stack -> setMessage ( new Message ( 'Call stack resulting from usage of uninitialized variable.' )); $result = new Result ( new Message ( 'Uninitialized variable.' )); $result -> addStacks ([ $stack ]); $result -> setRuleId ( 'TUT1001' ); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'collections/list.h' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 15 )); $location -> setPhysicalLocation ( $physicalLocation ); $logicalLocation = new LogicalLocation (); $logicalLocation -> setFullyQualifiedName ( 'collections::list::add' ); $location -> addLogicalLocations ([ $logicalLocation ]); $result -> addLocations ([ $location ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/stackFrame/","text":"stackFrame object A stackFrame object describes a single stack frame within a call stack. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"SarifSamples\" , \"version\" : \"1.0\" , \"informationUri\" : \"https:\\/\\/github.com\\/microsoft\\/sarif-tutorials\\/\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Uninitialized variable.\" }, \"ruleId\" : \"TUT1001\" , \"locations\" : [ { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"collections\\/list.h\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 15 } }, \"logicalLocations\" : [ { \"fullyQualifiedName\" : \"collections::list::add\" } ] } ], \"stacks\" : [ { \"frames\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"collections\\/list.h\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 110 , \"startColumn\" : 15 } }, \"logicalLocations\" : [ { \"fullyQualifiedName\" : \"collections::list::add_core\" } ] }, \"module\" : \"platform\" , \"threadId\" : 52 , \"parameters\" : [ \"null\" , \"0\" , \"14\" ] } ], \"message\" : { \"text\" : \"Call stack resulting from usage of uninitialized variable.\" } } ] } ] } ] } How to generate See examples/stack.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\LogicalLocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Stack ; use Bartlett\\Sarif\\Definition\\StackFrame ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'SarifSamples' ); $driver -> setInformationUri ( 'https://github.com/microsoft/sarif-tutorials/' ); $driver -> setVersion ( '1.0' ); $tool = new Tool ( $driver ); $frame = new StackFrame (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'collections/list.h' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 110 , 15 )); $location -> setPhysicalLocation ( $physicalLocation ); $logicalLocation = new LogicalLocation (); $logicalLocation -> setFullyQualifiedName ( 'collections::list::add_core' ); $location -> addLogicalLocations ([ $logicalLocation ]); $frame -> setLocation ( $location ); $frame -> setModule ( 'platform' ); $frame -> setThreadId ( 52 ); $frame -> addParameters ([ 'null' , '0' , '14' ]); $stack = new Stack ([ $frame ]); $stack -> setMessage ( new Message ( 'Call stack resulting from usage of uninitialized variable.' )); $result = new Result ( new Message ( 'Uninitialized variable.' )); $result -> addStacks ([ $stack ]); $result -> setRuleId ( 'TUT1001' ); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'collections/list.h' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 15 )); $location -> setPhysicalLocation ( $physicalLocation ); $logicalLocation = new LogicalLocation (); $logicalLocation -> setFullyQualifiedName ( 'collections::list::add' ); $location -> addLogicalLocations ([ $logicalLocation ]); $result -> addLocations ([ $location ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"stackFrame"},{"location":"reference/stackFrame/#stackframe-object","text":"A stackFrame object describes a single stack frame within a call stack. See specification .","title":"stackFrame object"},{"location":"reference/stackFrame/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"SarifSamples\" , \"version\" : \"1.0\" , \"informationUri\" : \"https:\\/\\/github.com\\/microsoft\\/sarif-tutorials\\/\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Uninitialized variable.\" }, \"ruleId\" : \"TUT1001\" , \"locations\" : [ { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"collections\\/list.h\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 15 } }, \"logicalLocations\" : [ { \"fullyQualifiedName\" : \"collections::list::add\" } ] } ], \"stacks\" : [ { \"frames\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"collections\\/list.h\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 110 , \"startColumn\" : 15 } }, \"logicalLocations\" : [ { \"fullyQualifiedName\" : \"collections::list::add_core\" } ] }, \"module\" : \"platform\" , \"threadId\" : 52 , \"parameters\" : [ \"null\" , \"0\" , \"14\" ] } ], \"message\" : { \"text\" : \"Call stack resulting from usage of uninitialized variable.\" } } ] } ] } ] }","title":"Example"},{"location":"reference/stackFrame/#how-to-generate","text":"See examples/stack.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\LogicalLocation ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Stack ; use Bartlett\\Sarif\\Definition\\StackFrame ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'SarifSamples' ); $driver -> setInformationUri ( 'https://github.com/microsoft/sarif-tutorials/' ); $driver -> setVersion ( '1.0' ); $tool = new Tool ( $driver ); $frame = new StackFrame (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'collections/list.h' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 110 , 15 )); $location -> setPhysicalLocation ( $physicalLocation ); $logicalLocation = new LogicalLocation (); $logicalLocation -> setFullyQualifiedName ( 'collections::list::add_core' ); $location -> addLogicalLocations ([ $logicalLocation ]); $frame -> setLocation ( $location ); $frame -> setModule ( 'platform' ); $frame -> setThreadId ( 52 ); $frame -> addParameters ([ 'null' , '0' , '14' ]); $stack = new Stack ([ $frame ]); $stack -> setMessage ( new Message ( 'Call stack resulting from usage of uninitialized variable.' )); $result = new Result ( new Message ( 'Uninitialized variable.' )); $result -> addStacks ([ $stack ]); $result -> setRuleId ( 'TUT1001' ); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'collections/list.h' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 15 )); $location -> setPhysicalLocation ( $physicalLocation ); $logicalLocation = new LogicalLocation (); $logicalLocation -> setFullyQualifiedName ( 'collections::list::add' ); $location -> addLogicalLocations ([ $logicalLocation ]); $result -> addLocations ([ $location ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/suppression/","text":"suppression object A suppression object describes a request to suppress a result. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"Psalm\" , \"version\" : \"4.x-dev\" , \"informationUri\" : \"https:\\/\\/psalm.de\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Request to suppress a result\" }, \"suppressions\" : [ { \"kind\" : \"inSource\" , \"guid\" : \"11111111-1111-1111-8888-111111111111\" , \"status\" : \"underReview\" , \"justification\" : \"result outdated\" } ] } ] } ] } How to generate See examples/suppression.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Suppression ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'Psalm' ); $driver -> setInformationUri ( 'https://psalm.de' ); $driver -> setVersion ( '4.x-dev' ); $tool = new Tool ( $driver ); $suppression = new Suppression ( 'inSource' ); $suppression -> setGuid ( '11111111-1111-1111-8888-111111111111' ); $suppression -> setStatus ( 'underReview' ); $suppression -> setJustification ( 'result outdated' ); $result = new Result ( new Message ( 'Request to suppress a result' )); $result -> addSuppressions ([ $suppression ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Suppression"},{"location":"reference/suppression/#suppression-object","text":"A suppression object describes a request to suppress a result. See specification .","title":"suppression object"},{"location":"reference/suppression/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"Psalm\" , \"version\" : \"4.x-dev\" , \"informationUri\" : \"https:\\/\\/psalm.de\" } }, \"results\" : [ { \"message\" : { \"text\" : \"Request to suppress a result\" }, \"suppressions\" : [ { \"kind\" : \"inSource\" , \"guid\" : \"11111111-1111-1111-8888-111111111111\" , \"status\" : \"underReview\" , \"justification\" : \"result outdated\" } ] } ] } ] }","title":"Example"},{"location":"reference/suppression/#how-to-generate","text":"See examples/suppression.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Suppression ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'Psalm' ); $driver -> setInformationUri ( 'https://psalm.de' ); $driver -> setVersion ( '4.x-dev' ); $tool = new Tool ( $driver ); $suppression = new Suppression ( 'inSource' ); $suppression -> setGuid ( '11111111-1111-1111-8888-111111111111' ); $suppression -> setStatus ( 'underReview' ); $suppression -> setJustification ( 'result outdated' ); $result = new Result ( new Message ( 'Request to suppress a result' )); $result -> addSuppressions ([ $suppression ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/threadFlow/","text":"threadFlow object A threadFlow object is a sequence of code locations that specify a possible path through a single thread of execution such as an operating system thread or a fiber. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A result object\" }, \"codeFlows\" : [ { \"threadFlows\" : [ { \"locations\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"ui\\/window.c\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 42 } } }, \"state\" : { \"x\" : { \"text\" : \"42\" }, \"y\" : { \"text\" : \"54\" }, \"x+y\" : { \"text\" : \"96\" } }, \"nestingLevel\" : 0 , \"executionOrder\" : 2 } ], \"id\" : \"thread-123\" , \"message\" : { \"text\" : \"A threadFlow object\" } } ], \"message\" : { \"text\" : \"A codeFlow object\" } } ] } ] } ] } How to generate See examples/codeFlow.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\CodeFlow ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\ThreadFlow ; use Bartlett\\Sarif\\Definition\\ThreadFlowLocation ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $threadFlowLocation = new ThreadFlowLocation (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'ui/window.c' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 42 )); $location -> setPhysicalLocation ( $physicalLocation ); $threadFlowLocation -> setLocation ( $location ); $threadFlowLocation -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '42' ), 'y' => new MultiformatMessageString ( '54' ), 'x+y' => new MultiformatMessageString ( '96' ), ]); $threadFlowLocation -> setNestingLevel ( 0 ); $threadFlowLocation -> setExecutionOrder ( 2 ); $threadFlow = new ThreadFlow ([ $threadFlowLocation ]); $threadFlow -> setId ( 'thread-123' ); $threadFlow -> setMessage ( new Message ( 'A threadFlow object' )); $codeFlow = new CodeFlow ([ $threadFlow ]); $codeFlow -> setMessage ( new Message ( 'A codeFlow object' )); $result = new Result ( new Message ( 'A result object' )); $result -> addCodeFlows ([ $codeFlow ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"threadFlow"},{"location":"reference/threadFlow/#threadflow-object","text":"A threadFlow object is a sequence of code locations that specify a possible path through a single thread of execution such as an operating system thread or a fiber. See specification .","title":"threadFlow object"},{"location":"reference/threadFlow/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A result object\" }, \"codeFlows\" : [ { \"threadFlows\" : [ { \"locations\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"ui\\/window.c\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 42 } } }, \"state\" : { \"x\" : { \"text\" : \"42\" }, \"y\" : { \"text\" : \"54\" }, \"x+y\" : { \"text\" : \"96\" } }, \"nestingLevel\" : 0 , \"executionOrder\" : 2 } ], \"id\" : \"thread-123\" , \"message\" : { \"text\" : \"A threadFlow object\" } } ], \"message\" : { \"text\" : \"A codeFlow object\" } } ] } ] } ] }","title":"Example"},{"location":"reference/threadFlow/#how-to-generate","text":"See examples/codeFlow.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\CodeFlow ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\ThreadFlow ; use Bartlett\\Sarif\\Definition\\ThreadFlowLocation ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $threadFlowLocation = new ThreadFlowLocation (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'ui/window.c' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 42 )); $location -> setPhysicalLocation ( $physicalLocation ); $threadFlowLocation -> setLocation ( $location ); $threadFlowLocation -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '42' ), 'y' => new MultiformatMessageString ( '54' ), 'x+y' => new MultiformatMessageString ( '96' ), ]); $threadFlowLocation -> setNestingLevel ( 0 ); $threadFlowLocation -> setExecutionOrder ( 2 ); $threadFlow = new ThreadFlow ([ $threadFlowLocation ]); $threadFlow -> setId ( 'thread-123' ); $threadFlow -> setMessage ( new Message ( 'A threadFlow object' )); $codeFlow = new CodeFlow ([ $threadFlow ]); $codeFlow -> setMessage ( new Message ( 'A codeFlow object' )); $result = new Result ( new Message ( 'A result object' )); $result -> addCodeFlows ([ $codeFlow ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/threadFlowLocation/","text":"threadFlowLocation object A threadFlowLocation object represents a location visited by an analysis tool in the course of simulating or monitoring the execution of a program. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A result object\" }, \"codeFlows\" : [ { \"threadFlows\" : [ { \"locations\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"ui\\/window.c\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 42 } } }, \"state\" : { \"x\" : { \"text\" : \"42\" }, \"y\" : { \"text\" : \"54\" }, \"x+y\" : { \"text\" : \"96\" } }, \"nestingLevel\" : 0 , \"executionOrder\" : 2 } ], \"id\" : \"thread-123\" , \"message\" : { \"text\" : \"A threadFlow object\" } } ], \"message\" : { \"text\" : \"A codeFlow object\" } } ] } ] } ] } How to generate See examples/codeFlow.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\CodeFlow ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\ThreadFlow ; use Bartlett\\Sarif\\Definition\\ThreadFlowLocation ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $threadFlowLocation = new ThreadFlowLocation (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'ui/window.c' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 42 )); $location -> setPhysicalLocation ( $physicalLocation ); $threadFlowLocation -> setLocation ( $location ); $threadFlowLocation -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '42' ), 'y' => new MultiformatMessageString ( '54' ), 'x+y' => new MultiformatMessageString ( '96' ), ]); $threadFlowLocation -> setNestingLevel ( 0 ); $threadFlowLocation -> setExecutionOrder ( 2 ); $threadFlow = new ThreadFlow ([ $threadFlowLocation ]); $threadFlow -> setId ( 'thread-123' ); $threadFlow -> setMessage ( new Message ( 'A threadFlow object' )); $codeFlow = new CodeFlow ([ $threadFlow ]); $codeFlow -> setMessage ( new Message ( 'A codeFlow object' )); $result = new Result ( new Message ( 'A result object' )); $result -> addCodeFlows ([ $codeFlow ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"threadFlowLocation"},{"location":"reference/threadFlowLocation/#threadflowlocation-object","text":"A threadFlowLocation object represents a location visited by an analysis tool in the course of simulating or monitoring the execution of a program. See specification .","title":"threadFlowLocation object"},{"location":"reference/threadFlowLocation/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"results\" : [ { \"message\" : { \"text\" : \"A result object\" }, \"codeFlows\" : [ { \"threadFlows\" : [ { \"locations\" : [ { \"location\" : { \"physicalLocation\" : { \"artifactLocation\" : { \"uri\" : \"ui\\/window.c\" , \"uriBaseId\" : \"SRCROOT\" }, \"region\" : { \"startLine\" : 42 } } }, \"state\" : { \"x\" : { \"text\" : \"42\" }, \"y\" : { \"text\" : \"54\" }, \"x+y\" : { \"text\" : \"96\" } }, \"nestingLevel\" : 0 , \"executionOrder\" : 2 } ], \"id\" : \"thread-123\" , \"message\" : { \"text\" : \"A threadFlow object\" } } ], \"message\" : { \"text\" : \"A codeFlow object\" } } ] } ] } ] }","title":"Example"},{"location":"reference/threadFlowLocation/#how-to-generate","text":"See examples/codeFlow.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\CodeFlow ; use Bartlett\\Sarif\\Definition\\Location ; use Bartlett\\Sarif\\Definition\\Message ; use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\PhysicalLocation ; use Bartlett\\Sarif\\Definition\\Region ; use Bartlett\\Sarif\\Definition\\Result ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\ThreadFlow ; use Bartlett\\Sarif\\Definition\\ThreadFlowLocation ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $threadFlowLocation = new ThreadFlowLocation (); $location = new Location (); $artifactLocation = new ArtifactLocation (); $artifactLocation -> setUri ( 'ui/window.c' ); $artifactLocation -> setUriBaseId ( 'SRCROOT' ); $physicalLocation = new PhysicalLocation ( $artifactLocation ); $physicalLocation -> setRegion ( new Region ( 42 )); $location -> setPhysicalLocation ( $physicalLocation ); $threadFlowLocation -> setLocation ( $location ); $threadFlowLocation -> addAdditionalProperties ([ 'x' => new MultiformatMessageString ( '42' ), 'y' => new MultiformatMessageString ( '54' ), 'x+y' => new MultiformatMessageString ( '96' ), ]); $threadFlowLocation -> setNestingLevel ( 0 ); $threadFlowLocation -> setExecutionOrder ( 2 ); $threadFlow = new ThreadFlow ([ $threadFlowLocation ]); $threadFlow -> setId ( 'thread-123' ); $threadFlow -> setMessage ( new Message ( 'A threadFlow object' )); $codeFlow = new CodeFlow ([ $threadFlow ]); $codeFlow -> setMessage ( new Message ( 'A codeFlow object' )); $result = new Result ( new Message ( 'A result object' )); $result -> addCodeFlows ([ $codeFlow ]); $run = new Run ( $tool ); $run -> addResults ([ $result ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/tool/","text":"tool object A tool object describes the analysis tool or converter that was run. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" }, \"extensions\" : [ { \"name\" : \"CodeScanner Security Rules\" , \"version\" : \"3.1\" } ] }, \"results\" : [] } ] } How to generate See examples/tool.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $extension = new ToolComponent ( 'CodeScanner Security Rules' ); $extension -> setVersion ( '3.1' ); $tool = new Tool ( $driver ); $tool -> addExtensions ([ $extension ]); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"Tool"},{"location":"reference/tool/#tool-object","text":"A tool object describes the analysis tool or converter that was run. See specification .","title":"tool object"},{"location":"reference/tool/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"fullName\" : \"CodeScanner 1.1, Developer Preview (en-US)\" , \"version\" : \"1.1.2b12\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" }, \"extensions\" : [ { \"name\" : \"CodeScanner Security Rules\" , \"version\" : \"3.1\" } ] }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/tool/#how-to-generate","text":"See examples/tool.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setFullName ( 'CodeScanner 1.1, Developer Preview (en-US)' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setVersion ( '1.1.2b12' ); $extension = new ToolComponent ( 'CodeScanner Security Rules' ); $extension -> setVersion ( '3.1' ); $tool = new Tool ( $driver ); $tool -> addExtensions ([ $extension ]); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/toolComponentReference/","text":"toolComponentReference object A toolComponentReference object identifies a particular toolComponent object, either theTool.driver or an element of theTool.extensions. We refer to the identified toolComponent object as theComponent. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA1000\" , \"relationships\" : [ { \"target\" : { \"index\" : 0 , \"id\" : \"327\" , \"guid\" : \"33333333-0000-1111-8888-111111111111\" , \"toolComponent\" : { \"name\" : \"CWE\" , \"guid\" : \"33333333-0000-1111-8888-000000000000\" } }, \"kinds\" : [ \"superset\" ] } ] } ] } }, \"results\" : [] } ] } How to generate See examples/reportingDescriptorRelationship.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorRelationship ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\ToolComponentReference ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'CA1000' ); $target = new ReportingDescriptorReference ( 0 , '327' , '33333333-0000-1111-8888-111111111111' ); $toolComponent = new ToolComponentReference (); $toolComponent -> setName ( 'CWE' ); $toolComponent -> setGuid ( '33333333-0000-1111-8888-000000000000' ); $target -> setToolComponent ( $toolComponent ); $relationship = new ReportingDescriptorRelationship ( $target ); $relationship -> addKinds ([ 'superset' ]); $rule -> addRelationships ([ $relationship ]); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"toolComponentReference"},{"location":"reference/toolComponentReference/#toolcomponentreference-object","text":"A toolComponentReference object identifies a particular toolComponent object, either theTool.driver or an element of theTool.extensions. We refer to the identified toolComponent object as theComponent. See specification .","title":"toolComponentReference object"},{"location":"reference/toolComponentReference/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"rules\" : [ { \"id\" : \"CA1000\" , \"relationships\" : [ { \"target\" : { \"index\" : 0 , \"id\" : \"327\" , \"guid\" : \"33333333-0000-1111-8888-111111111111\" , \"toolComponent\" : { \"name\" : \"CWE\" , \"guid\" : \"33333333-0000-1111-8888-000000000000\" } }, \"kinds\" : [ \"superset\" ] } ] } ] } }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/toolComponentReference/#how-to-generate","text":"See examples/reportingDescriptorRelationship.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ReportingDescriptor ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorReference ; use Bartlett\\Sarif\\Definition\\ReportingDescriptorRelationship ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\ToolComponentReference ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $rule = new ReportingDescriptor ( 'CA1000' ); $target = new ReportingDescriptorReference ( 0 , '327' , '33333333-0000-1111-8888-111111111111' ); $toolComponent = new ToolComponentReference (); $toolComponent -> setName ( 'CWE' ); $toolComponent -> setGuid ( '33333333-0000-1111-8888-000000000000' ); $target -> setToolComponent ( $toolComponent ); $relationship = new ReportingDescriptorRelationship ( $target ); $relationship -> addKinds ([ 'superset' ]); $rule -> addRelationships ([ $relationship ]); $driver -> addRules ([ $rule ]); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/translationMetadata./","text":"translationMetadata object A translationMetadata object defines locations of special significance to SARIF consumers. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"(fr-FR translation)\" , \"fullName\" : \"(fr-FR translation of translated component\\u2019s full name)\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"language\" : \"fr-FR\" , \"translationMetadata\" : { \"name\" : \"CodeScanner translation for fr-FR\" , \"fullName\" : \"CodeScanner translation for fr-FR by Example Corp.\" , \"shortDescription\" : { \"text\" : \"A good translation\" }, \"fullDescription\" : { \"text\" : \"A good translation performed by native en-US speakers.\" } } } }, \"results\" : [] } ] } How to generate See examples/translationMetadata.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\TranslationMetadata ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setLanguage ( 'fr-FR' ); $translationMetadata = new TranslationMetadata ( 'CodeScanner translation for fr-FR' ); $translationMetadata -> setFullName ( 'CodeScanner translation for fr-FR by Example Corp.' ); $translationMetadata -> setShortDescription ( new MultiformatMessageString ( 'A good translation' ) ); $translationMetadata -> setFullDescription ( new MultiformatMessageString ( 'A good translation performed by native en-US speakers.' ) ); $driver -> setTranslationMetadata ( $translationMetadata ); $driver -> setName ( '(fr-FR translation)' ); $driver -> setFullName ( '(fr-FR translation of translated component\u2019s full name)' ); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"translationMetadata."},{"location":"reference/translationMetadata./#translationmetadata-object","text":"A translationMetadata object defines locations of special significance to SARIF consumers. See specification .","title":"translationMetadata object"},{"location":"reference/translationMetadata./#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"(fr-FR translation)\" , \"fullName\" : \"(fr-FR translation of translated component\\u2019s full name)\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" , \"language\" : \"fr-FR\" , \"translationMetadata\" : { \"name\" : \"CodeScanner translation for fr-FR\" , \"fullName\" : \"CodeScanner translation for fr-FR by Example Corp.\" , \"shortDescription\" : { \"text\" : \"A good translation\" }, \"fullDescription\" : { \"text\" : \"A good translation performed by native en-US speakers.\" } } } }, \"results\" : [] } ] }","title":"Example"},{"location":"reference/translationMetadata./#how-to-generate","text":"See examples/translationMetadata.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\MultiformatMessageString ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\TranslationMetadata ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $driver -> setLanguage ( 'fr-FR' ); $translationMetadata = new TranslationMetadata ( 'CodeScanner translation for fr-FR' ); $translationMetadata -> setFullName ( 'CodeScanner translation for fr-FR by Example Corp.' ); $translationMetadata -> setShortDescription ( new MultiformatMessageString ( 'A good translation' ) ); $translationMetadata -> setFullDescription ( new MultiformatMessageString ( 'A good translation performed by native en-US speakers.' ) ); $driver -> setTranslationMetadata ( $translationMetadata ); $driver -> setName ( '(fr-FR translation)' ); $driver -> setFullName ( '(fr-FR translation of translated component\u2019s full name)' ); $tool = new Tool ( $driver ); $run = new Run ( $tool ); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/versionControlDetails/","text":"versionControlDetails object A versionControlDetails object specifies the information necessary to retrieve from a version control system (VCS) the correct revision of the files that were scanned during the run. See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"AndroidStudio\" , \"semanticVersion\" : \"1.0.0-beta.1\" , \"informationUri\" : \"https:\\/\\/android-studion.dev\" } }, \"versionControlProvenance\" : [ { \"repositoryUri\" : \"https:\\/\\/github.com\\/example-corp\\/package\" , \"revisionId\" : \"b87c4e9\" , \"mappedTo\" : { \"uriBaseId\" : \"PACKAGE_ROOT\" } }, { \"repositoryUri\" : \"https:\\/\\/github.com\\/example-corp\\/plugin1\" , \"revisionId\" : \"cafdac7\" , \"mappedTo\" : { \"uri\" : \"plugin1\" , \"uriBaseId\" : \"PACKAGE_ROOT\" } }, { \"repositoryUri\" : \"https:\\/\\/github.com\\/example-corp\\/plugin2\" , \"revisionId\" : \"d0dc2c0\" , \"mappedTo\" : { \"uri\" : \"plugin2\" , \"uriBaseId\" : \"PACKAGE_ROOT\" } } ], \"results\" : [] } ] } How to generate See examples/versionControlDetails.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Conversion ; use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\VersionControlDetails ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'AndroidStudio' ); $driver -> setInformationUri ( 'https://android-studion.dev' ); $driver -> setSemanticVersion ( '1.0.0-beta.1' ); $tool = new Tool ( $driver ); $package = new VersionControlDetails ( 'https://github.com/example-corp/package' ); $package -> setRevisionId ( 'b87c4e9' ); $packageMappedTo = new ArtifactLocation (); $packageMappedTo -> setUriBaseId ( 'PACKAGE_ROOT' ); $package -> setMappedTo ( $packageMappedTo ); $plugin1 = new VersionControlDetails ( 'https://github.com/example-corp/plugin1' ); $plugin1 -> setRevisionId ( 'cafdac7' ); $plugin1MappedTo = new ArtifactLocation (); $plugin1MappedTo -> setUriBaseId ( 'PACKAGE_ROOT' ); $plugin1MappedTo -> setUri ( 'plugin1' ); $plugin1 -> setMappedTo ( $plugin1MappedTo ); $plugin2 = new VersionControlDetails ( 'https://github.com/example-corp/plugin2' ); $plugin2 -> setRevisionId ( 'd0dc2c0' ); $plugin2MappedTo = new ArtifactLocation (); $plugin2MappedTo -> setUriBaseId ( 'PACKAGE_ROOT' ); $plugin2MappedTo -> setUri ( 'plugin2' ); $plugin2 -> setMappedTo ( $plugin2MappedTo ); $run = new Run ( $tool ); $run -> addVersionControlDetails ([ $package , $plugin1 , $plugin2 ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"versionControlDetails"},{"location":"reference/versionControlDetails/#versioncontroldetails-object","text":"A versionControlDetails object specifies the information necessary to retrieve from a version control system (VCS) the correct revision of the files that were scanned during the run. See specification .","title":"versionControlDetails object"},{"location":"reference/versionControlDetails/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"AndroidStudio\" , \"semanticVersion\" : \"1.0.0-beta.1\" , \"informationUri\" : \"https:\\/\\/android-studion.dev\" } }, \"versionControlProvenance\" : [ { \"repositoryUri\" : \"https:\\/\\/github.com\\/example-corp\\/package\" , \"revisionId\" : \"b87c4e9\" , \"mappedTo\" : { \"uriBaseId\" : \"PACKAGE_ROOT\" } }, { \"repositoryUri\" : \"https:\\/\\/github.com\\/example-corp\\/plugin1\" , \"revisionId\" : \"cafdac7\" , \"mappedTo\" : { \"uri\" : \"plugin1\" , \"uriBaseId\" : \"PACKAGE_ROOT\" } }, { \"repositoryUri\" : \"https:\\/\\/github.com\\/example-corp\\/plugin2\" , \"revisionId\" : \"d0dc2c0\" , \"mappedTo\" : { \"uri\" : \"plugin2\" , \"uriBaseId\" : \"PACKAGE_ROOT\" } } ], \"results\" : [] } ] }","title":"Example"},{"location":"reference/versionControlDetails/#how-to-generate","text":"See examples/versionControlDetails.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\ArtifactLocation ; use Bartlett\\Sarif\\Definition\\Conversion ; use Bartlett\\Sarif\\Definition\\Invocation ; use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\VersionControlDetails ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'AndroidStudio' ); $driver -> setInformationUri ( 'https://android-studion.dev' ); $driver -> setSemanticVersion ( '1.0.0-beta.1' ); $tool = new Tool ( $driver ); $package = new VersionControlDetails ( 'https://github.com/example-corp/package' ); $package -> setRevisionId ( 'b87c4e9' ); $packageMappedTo = new ArtifactLocation (); $packageMappedTo -> setUriBaseId ( 'PACKAGE_ROOT' ); $package -> setMappedTo ( $packageMappedTo ); $plugin1 = new VersionControlDetails ( 'https://github.com/example-corp/plugin1' ); $plugin1 -> setRevisionId ( 'cafdac7' ); $plugin1MappedTo = new ArtifactLocation (); $plugin1MappedTo -> setUriBaseId ( 'PACKAGE_ROOT' ); $plugin1MappedTo -> setUri ( 'plugin1' ); $plugin1 -> setMappedTo ( $plugin1MappedTo ); $plugin2 = new VersionControlDetails ( 'https://github.com/example-corp/plugin2' ); $plugin2 -> setRevisionId ( 'd0dc2c0' ); $plugin2MappedTo = new ArtifactLocation (); $plugin2MappedTo -> setUriBaseId ( 'PACKAGE_ROOT' ); $plugin2MappedTo -> setUri ( 'plugin2' ); $plugin2 -> setMappedTo ( $plugin2MappedTo ); $run = new Run ( $tool ); $run -> addVersionControlDetails ([ $package , $plugin1 , $plugin2 ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/webRequest/","text":"webRequest object A webRequest object describes an HTTP request (RFC7230). See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"webRequests\" : [ { \"protocol\" : \"http\" , \"version\" : \"1.1\" , \"target\" : \"httpbin.org\\/bearer\" , \"method\" : \"GET\" , \"headers\" : { \"accept\" : \"application\\/json\" , \"Authorization\" : \"none\" } } ], \"webResponses\" : [ { \"protocol\" : \"http\" , \"version\" : \"1.1\" , \"statusCode\" : 401 , \"reasonPhrase\" : \"Error: UNAUTHORIZED\" , \"headers\" : { \"access-control-allow-credentials\" : \"true\" , \"access-control-allow-origin\" : \"*\" , \"connection\" : \"keep-alive\" , \"content-length\" : \"0\" , \"content-type\" : \"text\\/html; charset=utf-8\" , \"date\" : \"Sun, 07 Nov 2021 08:59:53 GMT\" , \"server\" : \"gunicorn\\/19.9.0\" , \"www-authenticate\" : \"Bearer\" } } ], \"results\" : [] } ] } How to generate See examples/webRequest.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\WebRequest ; use Bartlett\\Sarif\\Definition\\WebResponse ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $webRequest = new WebRequest (); $webRequest -> setProtocol ( 'http' ); $webRequest -> setVersion ( '1.1' ); $webRequest -> setMethod ( 'GET' ); $webRequest -> setTarget ( 'httpbin.org/bearer' ); $webRequest -> addAdditionalPropertiesHeaders ([ 'accept' => 'application/json' , 'Authorization' => 'none' , ]); $webResponse = new WebResponse (); $webResponse -> setProtocol ( 'http' ); $webResponse -> setVersion ( '1.1' ); $webResponse -> setStatusCode ( 401 ); $webResponse -> setReasonPhrase ( 'Error: UNAUTHORIZED' ); $webResponse -> addAdditionalProperties ([ 'access-control-allow-credentials' => 'true' , 'access-control-allow-origin' => '*' , 'connection' => 'keep-alive' , 'content-length' => '0' , 'content-type' => 'text/html; charset=utf-8' , 'date' => 'Sun, 07 Nov 2021 08:59:53 GMT' , 'server' => 'gunicorn/19.9.0' , 'www-authenticate' => 'Bearer' , ]); $run = new Run ( $tool ); $run -> addWebRequests ([ $webRequest ]); $run -> addWebResponses ([ $webResponse ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"webRequest"},{"location":"reference/webRequest/#webrequest-object","text":"A webRequest object describes an HTTP request (RFC7230). See specification .","title":"webRequest object"},{"location":"reference/webRequest/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"webRequests\" : [ { \"protocol\" : \"http\" , \"version\" : \"1.1\" , \"target\" : \"httpbin.org\\/bearer\" , \"method\" : \"GET\" , \"headers\" : { \"accept\" : \"application\\/json\" , \"Authorization\" : \"none\" } } ], \"webResponses\" : [ { \"protocol\" : \"http\" , \"version\" : \"1.1\" , \"statusCode\" : 401 , \"reasonPhrase\" : \"Error: UNAUTHORIZED\" , \"headers\" : { \"access-control-allow-credentials\" : \"true\" , \"access-control-allow-origin\" : \"*\" , \"connection\" : \"keep-alive\" , \"content-length\" : \"0\" , \"content-type\" : \"text\\/html; charset=utf-8\" , \"date\" : \"Sun, 07 Nov 2021 08:59:53 GMT\" , \"server\" : \"gunicorn\\/19.9.0\" , \"www-authenticate\" : \"Bearer\" } } ], \"results\" : [] } ] }","title":"Example"},{"location":"reference/webRequest/#how-to-generate","text":"See examples/webRequest.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\WebRequest ; use Bartlett\\Sarif\\Definition\\WebResponse ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $webRequest = new WebRequest (); $webRequest -> setProtocol ( 'http' ); $webRequest -> setVersion ( '1.1' ); $webRequest -> setMethod ( 'GET' ); $webRequest -> setTarget ( 'httpbin.org/bearer' ); $webRequest -> addAdditionalPropertiesHeaders ([ 'accept' => 'application/json' , 'Authorization' => 'none' , ]); $webResponse = new WebResponse (); $webResponse -> setProtocol ( 'http' ); $webResponse -> setVersion ( '1.1' ); $webResponse -> setStatusCode ( 401 ); $webResponse -> setReasonPhrase ( 'Error: UNAUTHORIZED' ); $webResponse -> addAdditionalProperties ([ 'access-control-allow-credentials' => 'true' , 'access-control-allow-origin' => '*' , 'connection' => 'keep-alive' , 'content-length' => '0' , 'content-type' => 'text/html; charset=utf-8' , 'date' => 'Sun, 07 Nov 2021 08:59:53 GMT' , 'server' => 'gunicorn/19.9.0' , 'www-authenticate' => 'Bearer' , ]); $run = new Run ( $tool ); $run -> addWebRequests ([ $webRequest ]); $run -> addWebResponses ([ $webResponse ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"},{"location":"reference/webResponse/","text":"webResponse object A webResponse object describes the response to an HTTP request (RFC7230) See specification . Example { \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"webRequests\" : [ { \"protocol\" : \"http\" , \"version\" : \"1.1\" , \"target\" : \"httpbin.org\\/bearer\" , \"method\" : \"GET\" , \"headers\" : { \"accept\" : \"application\\/json\" , \"Authorization\" : \"none\" } } ], \"webResponses\" : [ { \"protocol\" : \"http\" , \"version\" : \"1.1\" , \"statusCode\" : 401 , \"reasonPhrase\" : \"Error: UNAUTHORIZED\" , \"headers\" : { \"access-control-allow-credentials\" : \"true\" , \"access-control-allow-origin\" : \"*\" , \"connection\" : \"keep-alive\" , \"content-length\" : \"0\" , \"content-type\" : \"text\\/html; charset=utf-8\" , \"date\" : \"Sun, 07 Nov 2021 08:59:53 GMT\" , \"server\" : \"gunicorn\\/19.9.0\" , \"www-authenticate\" : \"Bearer\" } } ], \"results\" : [] } ] } How to generate See examples/webRequest.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\WebRequest ; use Bartlett\\Sarif\\Definition\\WebResponse ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $webRequest = new WebRequest (); $webRequest -> setProtocol ( 'http' ); $webRequest -> setVersion ( '1.1' ); $webRequest -> setMethod ( 'GET' ); $webRequest -> setTarget ( 'httpbin.org/bearer' ); $webRequest -> addAdditionalPropertiesHeaders ([ 'accept' => 'application/json' , 'Authorization' => 'none' , ]); $webResponse = new WebResponse (); $webResponse -> setProtocol ( 'http' ); $webResponse -> setVersion ( '1.1' ); $webResponse -> setStatusCode ( 401 ); $webResponse -> setReasonPhrase ( 'Error: UNAUTHORIZED' ); $webResponse -> addAdditionalProperties ([ 'access-control-allow-credentials' => 'true' , 'access-control-allow-origin' => '*' , 'connection' => 'keep-alive' , 'content-length' => '0' , 'content-type' => 'text/html; charset=utf-8' , 'date' => 'Sun, 07 Nov 2021 08:59:53 GMT' , 'server' => 'gunicorn/19.9.0' , 'www-authenticate' => 'Bearer' , ]); $run = new Run ( $tool ); $run -> addWebRequests ([ $webRequest ]); $run -> addWebResponses ([ $webResponse ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"webResponse"},{"location":"reference/webResponse/#webresponse-object","text":"A webResponse object describes the response to an HTTP request (RFC7230) See specification .","title":"webResponse object"},{"location":"reference/webResponse/#example","text":"{ \"$schema\" : \"https:\\/\\/json.schemastore.org\\/sarif-2.1.0.json\" , \"version\" : \"2.1.0\" , \"runs\" : [ { \"tool\" : { \"driver\" : { \"name\" : \"CodeScanner\" , \"semanticVersion\" : \"1.1.2-beta.12\" , \"informationUri\" : \"https:\\/\\/codeScanner.dev\" } }, \"webRequests\" : [ { \"protocol\" : \"http\" , \"version\" : \"1.1\" , \"target\" : \"httpbin.org\\/bearer\" , \"method\" : \"GET\" , \"headers\" : { \"accept\" : \"application\\/json\" , \"Authorization\" : \"none\" } } ], \"webResponses\" : [ { \"protocol\" : \"http\" , \"version\" : \"1.1\" , \"statusCode\" : 401 , \"reasonPhrase\" : \"Error: UNAUTHORIZED\" , \"headers\" : { \"access-control-allow-credentials\" : \"true\" , \"access-control-allow-origin\" : \"*\" , \"connection\" : \"keep-alive\" , \"content-length\" : \"0\" , \"content-type\" : \"text\\/html; charset=utf-8\" , \"date\" : \"Sun, 07 Nov 2021 08:59:53 GMT\" , \"server\" : \"gunicorn\\/19.9.0\" , \"www-authenticate\" : \"Bearer\" } } ], \"results\" : [] } ] }","title":"Example"},{"location":"reference/webResponse/#how-to-generate","text":"See examples/webRequest.php script. <?php declare ( strict_types = 1 ); use Bartlett\\Sarif\\Definition\\Run ; use Bartlett\\Sarif\\Definition\\Tool ; use Bartlett\\Sarif\\Definition\\ToolComponent ; use Bartlett\\Sarif\\Definition\\WebRequest ; use Bartlett\\Sarif\\Definition\\WebResponse ; use Bartlett\\Sarif\\SarifLog ; require_once dirname ( __DIR__ ) . '/vendor/autoload.php' ; $driver = new ToolComponent ( 'CodeScanner' ); $driver -> setInformationUri ( 'https://codeScanner.dev' ); $driver -> setSemanticVersion ( '1.1.2-beta.12' ); $tool = new Tool ( $driver ); $webRequest = new WebRequest (); $webRequest -> setProtocol ( 'http' ); $webRequest -> setVersion ( '1.1' ); $webRequest -> setMethod ( 'GET' ); $webRequest -> setTarget ( 'httpbin.org/bearer' ); $webRequest -> addAdditionalPropertiesHeaders ([ 'accept' => 'application/json' , 'Authorization' => 'none' , ]); $webResponse = new WebResponse (); $webResponse -> setProtocol ( 'http' ); $webResponse -> setVersion ( '1.1' ); $webResponse -> setStatusCode ( 401 ); $webResponse -> setReasonPhrase ( 'Error: UNAUTHORIZED' ); $webResponse -> addAdditionalProperties ([ 'access-control-allow-credentials' => 'true' , 'access-control-allow-origin' => '*' , 'connection' => 'keep-alive' , 'content-length' => '0' , 'content-type' => 'text/html; charset=utf-8' , 'date' => 'Sun, 07 Nov 2021 08:59:53 GMT' , 'server' => 'gunicorn/19.9.0' , 'www-authenticate' => 'Bearer' , ]); $run = new Run ( $tool ); $run -> addWebRequests ([ $webRequest ]); $run -> addWebResponses ([ $webResponse ]); $log = new SarifLog ([ $run ]); try { echo $log , PHP_EOL ; } catch ( Exception $e ) { echo \"Unable to produce SARIF report due to following error: \" . $e -> getMessage (), PHP_EOL ; }","title":"How to generate"}]}